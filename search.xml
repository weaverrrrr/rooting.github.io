<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>再见51</title>
      <link href="/2018/11/10/goodbye51/"/>
      <url>/2018/11/10/goodbye51/</url>
      
        <content type="html"><![CDATA[<p><strong>51信用卡</strong>是我入职的第一家公司，前端开发也是我的第一份工作。从2017年6月开始实习算起，也在公司待了一年多，在很多同事眼中也是个老员工了。这一年多来我也是见证了公司的起起伏伏，从飞速扩张到上市到人员结构优化，感想真的太多了。<br><a id="more"></a></p><p>我见到了很多套路，也学到了很多反套路；待过很简单很轻松的项目组，也待过很累很难的项目组；见过同事们一起谈笑风生，也见过因为一些矛盾而大吵三天的场面。幸好研发部门还都是比较单纯的一群人，心机还不算多，对我这种小绵羊性格的还算友善。从校园到社会都感觉不到过渡，完全是两个世界，我知道我现在体会到的只是冰山一角，所以我还要努力让自己变得成熟、强大。正所谓好记性不如烂笔头，打算把这些重要的东西抓紧记下来。</p><p><br></p><h2 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h2><ul><li><strong>2017-06-15 ：入职51实习，进入金融组</strong></li><li>2017-06-20 ：进入案件管理系统项目组</li><li><strong>2017-07-24 ：金融组分离，转至后台组</strong>  </li><li>2017-08-10 ：进入工程平台业务线（陀飞轮、NX-SERVICE）</li><li><strong>2017-11-30 ：实习生转为校招生</strong></li><li><strong>2018-03-05 ：后台组分离，转至后台业务组。</strong><ul><li>离开工程平台业务线（陀飞轮、NX-SERVICE）</li><li>离开案件管理系统项目组；</li><li>加入后台业务组，进入运营业务线（顶天、金融渠道）。 </li></ul></li><li><strong>2018-07-01 ：毕业，签订劳动合同生效。</strong></li><li>2018-08-16 ：进入享读创新项目。</li><li><strong>2018-08-21 ：前端组织架构大调整，转至产品运营业务组，工作项目不变。</strong></li><li><strong>2018-10-26 ：离职</strong></li></ul><p><br></p><h2 id="点滴感悟"><a href="#点滴感悟" class="headerlink" title="点滴感悟"></a>点滴感悟</h2><ul><li>做什么事都要趁早，不能一拖再拖，改掉拖延症。</li><li>业务压力大时要学会调剂自己，同时也要去尝试沟通；</li><li>不能光埋头做业务，要抽时间去提升、拓展自己的能力；</li><li>记笔记、写博客、写文档是个好习惯，要坚持下去；</li><li>要学会去管理时间，多做规划，不能节奏一团糟；</li><li>谨言慎行，质问他人前先自己思考、向前辈请教。</li><li>多和前辈聊天、谈心，不能自己闷着钻牛角尖。</li><li>要时刻有危机感，想办法把自己提升到不可替代的位置。</li><li>要多去思考怎么样去提升自己来改变现状，而不是一味要求别人来改变；</li><li>要多去关注组内的发展建设，看到组内存在的问题要积极想办法去解决；</li><li>在团队中，一定要要重视代码规范，要统一；</li><li>每个系统都有价值，对待每个系统都要带有责任心、摆正心态；</li><li>要沉浸到项目中，提出自己的见解，面向用户编程，而不是面向需求编程；</li><li>任何事都要通知到位，要多和团队沟通；</li><li>多去换位思考，站在不同角度去分析项目、产品、工作、团队及公司决策；</li></ul><p><br></p><h2 id="工作总结"><a href="#工作总结" class="headerlink" title="工作总结"></a>工作总结</h2><h3 id="团队工作"><a href="#团队工作" class="headerlink" title="团队工作"></a>团队工作</h3><ul><li>加入后台组组委会，协助组内推动代码规范，管理组内财务，维护组内wiki。</li><li>加入性能优化专题小组，研究并整理理论层面、代码层面及典型场景下的优化方案。</li><li>辅助、指导非前端开发人员学习并构建前端项目，与其他技术组互相学习，并产出文档：<ul><li>2018-06-01 ~ 2018-07-13：指导并协助基础测试组测开人员开发NBTms项目(自动化测试平台)。</li><li>2018-05-28 ~ 2018-10-26：指导并协助后台运营组后端人员开发票券后台系统。</li></ul></li></ul><hr><h3 id="案件管理系统"><a href="#案件管理系统" class="headerlink" title="案件管理系统"></a>案件管理系统</h3><p>时间：2017-06-20 ~ 2018-01-10</p><h4 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>公司内部后台系统。系统分为订单列表、案件来源、案件管理、名单库、调查监控四个大模块，每个模块包含了若干页面。反欺诈业务人员能集中查看各类详细数据，快速查出高风险订单与重要案件，利用标签、收藏夹、统计等功能高效整理数据，同时，不同角色操作权限的严格控制保证了反欺诈业务的规范性。</p><h4 id="工作内容"><a href="#工作内容" class="headerlink" title="工作内容"></a>工作内容</h4><ul><li>2017-06-20 ~ 2017-07-11：中途接手，独立完成两期需求。由于是老项目，前后端不分离，使用jQuery+bootstrap。</li><li>2017-07-12 ~ 2018-01-10：独立完成项目整体的重构，并完成后续的三期大版本迭代工作。使用vue + vuex + webpack + less + <a href="https://51nb.github.io/miox-doc/" target="_blank" rel="noopener">miox(公司内部)</a> + 内部组件库。</li><li>2018-03-05：由于组织架构调整，交由其他组维护。</li></ul><h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><ul><li>独立开发、中途接手、完成重构。</li><li>角色分配、权限控制功能较为复杂。</li><li>对重要信息展示方式方面要求较高。</li><li>技术栈：vue + vuex + webpack + less + <a href="https://51nb.github.io/miox-doc/" target="_blank" rel="noopener">miox(公司内部)</a> + 内部组件库。</li></ul><h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>这是我的启蒙项目。这是我入职以来接触的第一个项目，先是在学长的带领下维护老系统，不久就开始对其进行整体重构工作。期间我经历了完整的项目流程，接触到了公司的各种优秀框架，这些对于我来说是一种全新的体验。学长也是很耐心的教我使用各种工具、框架，带我接触项目，也日常检查我的代码，指出可以优化的地方，教我如何自主学习，养成良好的开发习惯，提高各方面的能力。在学长及后端大哥的帮助下，很快适应了，沟通能力和代码能力得到了飞速的提升，并如期完成了项目。完成了一个月的重构工作后，我也算是走出了新手村。在不断的请教和学习下，我对公司的前端体系有了基本的了解，对后台模板代码有了较深的理解，对项目管理也有了大体的认知。</p><hr><h3 id="数据研发平台"><a href="#数据研发平台" class="headerlink" title="数据研发平台"></a>数据研发平台</h3><p>时间：2017-08-10 ~ 2018-03-03</p><h4 id="项目介绍-1"><a href="#项目介绍-1" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>公司内部工程平台相关系统。数据研发平台是结合公司的实际应用场景自研的一个集中式的任务调度系统。具备调度、即席查询、数据导入导出、权限与容量管理、流式计算、监控与报警等功能。它能解放平台开发、平台运维的精力，并解决用户的以下痛点：1、化繁为简，减少配置；2、自动化IDE，方便开发调试；3、版本化的任务管理；4、统一任务和数据的视图；5.资源报表与统计；6、支持多种任务类型。</p><h4 id="工作内容-1"><a href="#工作内容-1" class="headerlink" title="工作内容"></a>工作内容</h4><ul><li>2017-08-10 ~ 2017.09.22：独立开发完成第一个简单版本，实现一些基本功能。</li><li>2017-10-10 ~ 2018-03-03：与另外两个搭档合作开发完成整个系统。我主要负责各类任务的可视化管理、各类任务调度配置、任务依赖关系管理等功能。</li><li>2017-12-22 ~ 2018-03-03：在数据研发平台被完全替代前，独立维护数据研发平台的前身-Tourbillon，配合数据研发平台的上线进行修改及维护。</li><li>2018-03-03：由于组织架构调整，交由其他组维护。</li></ul><h4 id="要点-1"><a href="#要点-1" class="headerlink" title="要点"></a>要点</h4><ul><li>协作开发，新启项目。</li><li>对于数据的可视化程度要求较高。</li><li>项目规模很大，对团队协作能力要求较高。</li><li>任务比较繁重，对个人抗压能力要求较高。</li><li>技术栈：vue + vuex + webpack + less + element UI + codemirror + echarts + vis.js + miox + 内部组件库。</li></ul><h4 id="感悟-1"><a href="#感悟-1" class="headerlink" title="感悟"></a>感悟</h4><p>这是我接手的第二个项目，比案件管理系统要复杂得多，并且不像案件管理系统已经趋于稳定了，它需要我从无到有的开始开发、磨合，是对我的一个很大的考验。这需要我考虑到很多东西，与产品、后端探讨项目设计中的各种问题。这也我是第一次与其他同事协同开发整个前端，第一次进项目会议室体验封闭式开发，为了各种bug焦头烂额，为了赶进度加班加点。由于代码非常复杂，又是协作开发，对代码质量及规范、团队合作、项目沟通、时间管理等方面有了更深刻的感悟。也学到了不少黑科技，收货颇丰。</p><hr><h3 id="NX-SERVICE"><a href="#NX-SERVICE" class="headerlink" title="NX-SERVICE"></a>NX-SERVICE</h3><p>时间：2017-11-20 ~ 2018-03-03</p><h4 id="项目介绍-2"><a href="#项目介绍-2" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>公司内部工程平台相关系统。NX-SERVICE是工程平台部整个部门统一数据接口服务平台，用户可以进行检索、接口权限申请、接口配置及接口测试等。对于用户来说，此系统可以通过配置化的方式自动生成数据调用接口来减少新增接口的开发工作量，还可以保障业务方数据调用的稳定性，降低维护成本；对于平台来说，NX-SERVICE的数据仓库模型和计算服务的能力输出，可以完善整个数据服务链路的闭环，也便于做好数据出口的权限控制。</p><h4 id="工作内容-2"><a href="#工作内容-2" class="headerlink" title="工作内容"></a>工作内容</h4><ul><li>2017-11-20 ~ 2017-12-07：独立完成第一个大版本。</li><li>2018-03-03：由于组织架构调整，交由其他组维护。</li></ul><h4 id="要点-2"><a href="#要点-2" class="headerlink" title="要点"></a>要点</h4><ul><li>独立开发，新启项目。</li><li>后端第一次接触web开发，需要我去配合与协助纠正。</li><li>技术栈：vue + vuex + webpack + less + codemirror + miox + 内部组件库。</li></ul><h4 id="感悟-2"><a href="#感悟-2" class="headerlink" title="感悟"></a>感悟</h4><p>经过在数据研发平台项目组中一段时间的总结沉淀，我懂得了如何去加强沟通，代码方面要注重可复用性、可维护性与规范性。由于后端刚接触web开发，所以在共同钻研的过程中，我对于前后端合作也是有了更多感受与想法，很多踩到的坑都是宝贵的经验。这个项目算是对我的一个考核，考核我在之前的项目锻炼中，能力到底有没有真正的产生质的飞跃，总结出来的经验能不能真正的用到实际场景中。最后项目顺利上线，我对自己的努力结果还是挺满意的。</p><hr><h3 id="金融渠道管理后台"><a href="#金融渠道管理后台" class="headerlink" title="金融渠道管理后台"></a>金融渠道管理后台</h3><p>时间：2018-03-08 ~ 2018-10-26</p><h4 id="项目介绍-3"><a href="#项目介绍-3" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>对内也对外的系统。外部渠道方只能查看有权限的数据，内部人员则可以利用本系统来管理所有渠道、查看各渠道报表数据、计算结算金额及给外部渠道方设置权限。业务人员可以直观得看到渠道效果，帮助他们分析数据，思考出最大利益的投放方案，来提高拉新、增加转化率。</p><h4 id="工作内容-3"><a href="#工作内容-3" class="headerlink" title="工作内容"></a>工作内容</h4><ul><li>2018-03-08 ~ 2018-10-26 ：中途接手，独立完成所有大小需求。</li><li>2018-07-24 ~ 2018-09-23 ：项目整体大优化，解决性能瓶颈。</li></ul><h4 id="要点-3"><a href="#要点-3" class="headerlink" title="要点"></a>要点</h4><ul><li>独立开发，中途接手，完成重构。</li><li>项目接手后，发现了许多历史遗留bug及可优化点，由于耦合性过强，整改任务还是比较艰巨的。</li><li>技术栈：vue + vuex + webpack + less + vue-router + element UI + 内部组件库。</li></ul><h4 id="感悟-3"><a href="#感悟-3" class="headerlink" title="感悟"></a>感悟</h4><p>这个项目接手后，发现了许多问题及可优化点：由于组件库混用导致本地调试控制台出现了大量报错、某些依赖包版本过低兼容性差、大量代码严重冗余、复用性差、耦合性过强、可扩展性差、没有遵守组内统一规范等等。整体优化改动很大，相当于是重构，需求又一直在迭代，需要经过严谨的测试才能发布上线，而且项目人员又少，缺少产品和测试。尽管整改难度大，但我仍坚持接受这个挑战，抽出空余时间理解整个项目，与业务方沟通说明优化方案，一点点修改整个框架，抽出通用组件，重写逻辑杂乱的页面，同时向专业测试人员请教以完成高质量自测。优化版上线后，性能提升不少，还增加了一些实用小功能，后续开发工作也省了不少时间，结果还是非常满意的，业务方也是赞赏不已，所谓磨刀不误砍柴工嘛。</p><hr><h3 id="顶天系统"><a href="#顶天系统" class="headerlink" title="顶天系统"></a>顶天系统</h3><p>时间：2018-03-09 ~ 2018-10-26</p><h4 id="项目介绍-4"><a href="#项目介绍-4" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>公司内部运营后台系统。集成了渠道素材管理、投放管理、渠道对接管理、应用信息管理、应用包管理(上传apk文件,补丁管理)、渠道费用管理、渠道媒体管理及X项目配置管理等功能模块，能满足营销部门及运营线开发的很多需求。</p><h4 id="工作内容-4"><a href="#工作内容-4" class="headerlink" title="工作内容"></a>工作内容</h4><ul><li>2018-03-09 ~ 2018-10-26 ：中途接手，对已有功能进行迭代维护。</li><li>2018-06-14 ~ 2018-10-26 ：重建素材库，改造成类似网盘的模式，并进行迭代维护。</li><li>2018-03-09 ~ 2018-05-28 ：开发补丁包管理模块，并进行迭代维护。</li></ul><h4 id="要点-4"><a href="#要点-4" class="headerlink" title="要点"></a>要点</h4><ul><li>独立开发，中途接手。</li><li>技术栈：vue + vuex + webpack + less + vue-router + element UI。</li></ul><h4 id="感悟-4"><a href="#感悟-4" class="headerlink" title="感悟"></a>感悟</h4><p>顶天是一个比较简单的项目，页面功能简单，逻辑清晰易懂，也许是因为我有经验了吧。很开心的是认识了一个非常优秀的后端，前后端分工很明确，每次需求接口完成都很快，并且都会在wiki上写出一份很详细的接口使用文档，做事也会考虑到很深很远，和他合作效率超高，也从他身上学到了不少品质。</p><hr><h3 id="享读reRead"><a href="#享读reRead" class="headerlink" title="享读reRead"></a>享读reRead</h3><p>时间：2018-08-16 ~ 2018-10-26</p><h4 id="项目介绍-5"><a href="#项目介绍-5" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>公司对外创新项目。享读是一款稍后阅读工具，支持多平台文章收藏与存储。在提供极致阅读体验的同时，你还可以在圈子中阅读朋友收集的优质内容，相互碰撞，得到启发。同时支持知乎、微信公众号、今日头条、豆瓣等全网主流平台文章的收藏与内容的优化排版。</p><h4 id="工作内容-5"><a href="#工作内容-5" class="headerlink" title="工作内容"></a>工作内容</h4><ul><li>相关H5页面：包括<a href="https://reread.com.cn/#/" target="_blank" rel="noopener">官网</a>、文章详情页、个人收藏页、部分壳内页面。</li><li>微信小程序：本项目小程序主要做导流用，具备享读基本的分享、阅读功能，包括个人圈子列表页、圈子详情页、圈子成员页、文章详情页。</li><li>后台系统：开发并维护两个享读后台系统——享读运营后台、享读文章解析后台。</li><li>爬虫工作：承担一部分简单爬虫工作，同时辅助优化一些较复杂的爬取脚本。</li><li>Chrome插件：开发在Chrome上可同步、收藏文章的享读插件。</li></ul><h4 id="要点-5"><a href="#要点-5" class="headerlink" title="要点"></a>要点</h4><ul><li>独立开发、新启项目、公司创新项目</li><li>H5技术栈：vue + vuex + webpack + sass + vue-router + 内部组件库</li><li>后台系统技术栈：vue + vuex + webpack + less + vue-router + 内部组件库</li><li>微信小程序技术栈：mpvue + vuex + webpack + less</li><li>爬虫技术栈：node + puppetter</li><li>chrome插件技术栈：vue + vuex + webpack + sass + element UI</li></ul><h4 id="感悟-5"><a href="#感悟-5" class="headerlink" title="感悟"></a>感悟</h4><p>由于工作长期都是后台系统，所以我的移动端开发能力是比较薄弱的。幸运的是我又进入了享读项目组，涉及到了小程序、H5、chrome插件甚至爬虫，带我正式进入了移动端的领域。经过这段时间的努力以及各位同事的帮助，终于对移动端的开发有所积累，努力完成了从pc端到移动端的过渡，补全自己在移动端开发方面能力的不足。在这个创新项目组中，虽然一直都在为用户体系、微信审核等忙得焦头烂额，找公司各种人沟通打交道，但是每天都过得很充实，一步一步踩的坑都是非常宝贵的经验。</p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>puppeteer实战-微信文章爬取调研</title>
      <link href="/2018/10/20/puppeteer-1/"/>
      <url>/2018/10/20/puppeteer-1/</url>
      
        <content type="html"><![CDATA[<h2 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h2><p>Puppeteer是一个Nodejs的库，支持调用Chrome的API来操纵Web，可以很方便的用它来抓取文章。微信公众号文章又是大家阅读量非常大的一个平台，但是想要完美得抓取出公众号文章是相当难的。<br><a id="more"></a></p><h2 id="编辑工具"><a href="#编辑工具" class="headerlink" title="编辑工具"></a>编辑工具</h2><p>微信公众号的文章一般是通过如下的富文本编辑器进行编辑，就算是使用了其他第三方的编辑器（如秀米），也是编辑完再复制到后台的，所以只研究后台的这个编辑器就OK了。<br><img src="/image/puppeteer/1-1-1.png" alt="编辑工具"></p><h2 id="典型文章"><a href="#典型文章" class="headerlink" title="典型文章"></a>典型文章</h2><ol><li>带视频的文章： <a href="https://mp.weixin.qq.com/s/Uw6b7_W_NkCZDIce4Obn6g" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Uw6b7_W_NkCZDIce4Obn6g</a>  </li><li>带音频的文章：<a href="https://mp.weixin.qq.com/s/-5oj6Q4qYS0gf5hptNYfjw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/-5oj6Q4qYS0gf5hptNYfjw</a>  </li><li>带投票的文章：<a href="https://mp.weixin.qq.com/s/ROlm_YXgmQMC1of7CEojRw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ROlm_YXgmQMC1of7CEojRw</a>  </li><li>带小程序二维码的文章：<a href="https://mp.weixin.qq.com/s/A9UvCji6XJmfusNpSWigFQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/A9UvCji6XJmfusNpSWigFQ</a>  </li><li>特殊视频类文章：<a href="https://mp.weixin.qq.com/s/XPrdTJppD-jVCwuGzdd0Ew" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/XPrdTJppD-jVCwuGzdd0Ew</a><br>推送出来是个视频，点进去是篇带视频的文章：<br><img src="/image/puppeteer/1-2-1.png" alt="特殊视频类文章"></li><li>分享类文章：  <ul><li><a href="https://mp.weixin.qq.com/s/fnVRpI1rvMHDnTZIiMzL-A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/fnVRpI1rvMHDnTZIiMzL-A</a> </li><li><a href="https://mp.weixin.qq.com/s/nlR6AzRi1IPnWh0m9M9dcA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/nlR6AzRi1IPnWh0m9M9dcA</a></li></ul></li><li>争议类文章：<ul><li><a href="https://mp.weixin.qq.com/safe/dispute?action=info&amp;__biz=MzIxMjgxMDAwOA==&amp;mid=2247485963&amp;idx=1&amp;sn=661d71f440962cebc08594abb124bd20#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/safe/dispute?action=info&amp;__biz=MzIxMjgxMDAwOA==&amp;mid=2247485963&amp;idx=1&amp;sn=661d71f440962cebc08594abb124bd20#wechat_redirect</a></li></ul></li></ol><h2 id="元素分析"><a href="#元素分析" class="headerlink" title="元素分析"></a>元素分析</h2><h3 id="普通元素"><a href="#普通元素" class="headerlink" title="普通元素"></a>普通元素</h3><ul><li>这些看起来很复杂的元素，都是富文本，可以简单理解为带css样式的图片和文字<br><img src="/image/puppeteer/1-3-1.png" alt="普通元素"></li></ul><h3 id="特殊图片元素"><a href="#特殊图片元素" class="headerlink" title="特殊图片元素"></a>特殊图片元素</h3><ul><li>右上角带着类似出口标志的都是带超链接的图片</li><li>特征：class=”js_jump_icon h5_image_link”<br><img src="/image/puppeteer/1-3-2.png" alt="特殊图片元素"></li></ul><h3 id="视频元素"><a href="#视频元素" class="headerlink" title="视频元素"></a>视频元素</h3><ul><li>特征：class=”js_tx_video_container” 嵌iframe的方式</li><li>上传视频要求：视频不能超过20M，超过20M的视频可至腾讯视频上传后添加，也可通过添加视频详情页链接以及公众号文章链接插入视频，视频时长不少于1秒，不多于10小时，支持大部分主流视频格式。</li><li>小于20MB的视频好像也会转到腾讯视频（如<a href="https://mp.weixin.qq.com/s/VOLKVAIcOqiX-XAv-s3b2w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/VOLKVAIcOqiX-XAv-s3b2w</a> 待验证）</li></ul><h3 id="音频元素"><a href="#音频元素" class="headerlink" title="音频元素"></a>音频元素</h3><ul><li>特征：qqmusic标签，class=”db qqmusic_area</li><li>上传音频要求：格式支持mp3、wma、wav、amr，文件大小不超过30M，语音时长不超过30分钟</li></ul><h3 id="投票元素"><a href="#投票元素" class="headerlink" title="投票元素"></a>投票元素</h3><ul><li>特征：class=”vote_iframe js_editor_vote_card” </li><li>嵌iframe的方式加进文章</li></ul><h3 id="小程序元素"><a href="#小程序元素" class="headerlink" title="小程序元素"></a>小程序元素</h3><ul><li>特征：mp-miniprogram标签，class=”weapp_display_element js_weapp_display_element”</li></ul><h3 id="文章链接卡片"><a href="#文章链接卡片" class="headerlink" title="文章链接卡片"></a>文章链接卡片</h3><ul><li>公众号可分享原创声明文章：<a href="https://jingyan.baidu.com/article/454316ab126339f7a7c03aae.html" target="_blank" rel="noopener">微信公众号如何分享原创声明文章？</a>，分享后网页样式会有所不同。</li><li>分享者只能编辑引导语，且只能编辑文字，并且限制在140字以内，无法插入图片，文字样式等也不可更改。</li><li>例如：<a href="https://mp.weixin.qq.com/s/fnVRpI1rvMHDnTZIiMzL-A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/fnVRpI1rvMHDnTZIiMzL-A</a></li><li>特征：id=”js_share_content”</li></ul><h3 id="底部广告与留言元素"><a href="#底部广告与留言元素" class="headerlink" title="底部广告与留言元素"></a>底部广告与留言元素</h3><ul><li>pc端会隐藏掉 点赞小手 及 以下的所有内容，所以不用去管底部的广告与留言。<br><img src="/image/puppeteer/1-3-3.png" alt="底部广告与留言元素"></li></ul><h3 id="打赏元素"><a href="#打赏元素" class="headerlink" title="打赏元素"></a>打赏元素</h3><ul><li><a href="https://mp.weixin.qq.com/s/8VLIsbkuQcAFI5qM_B4g3w" target="_blank" rel="noopener">打赏功能</a>，由于微信和苹果吵了一架，iOS就没有了赞赏功能，但是PC上打开是没有的，所以也不用管了。<br><img src="/image/puppeteer/1-3-4.png" alt="打赏元素"></li></ul><h2 id="非文章内容"><a href="#非文章内容" class="headerlink" title="非文章内容"></a>非文章内容</h2><h3 id="微信自带广告"><a href="#微信自带广告" class="headerlink" title="微信自带广告"></a>微信自带广告</h3><ul><li>位于 点赞小手 下方</li><li>在PC端打开不会出现不用管。</li></ul><h3 id="评论留言及打赏"><a href="#评论留言及打赏" class="headerlink" title="评论留言及打赏"></a>评论留言及打赏</h3><ul><li>位于 点赞小手 下方</li><li>在PC端打开不会出现不用管。</li></ul><h3 id="编辑者放的广告"><a href="#编辑者放的广告" class="headerlink" title="编辑者放的广告"></a>编辑者放的广告</h3><ul><li>普通文本：如 “点击关注…”、“点击阅读原文”；</li><li>带超链接的广告图片；</li><li>不带超链接的普通广告图片；</li><li>小程序卡片；  </li></ul><p>由于那些内容是编辑者自己放的，有些情况下其本身是文章中不可删除的内容部分，若一概删除会有内容丢失的风险。</p><h3 id="文章推荐列表"><a href="#文章推荐列表" class="headerlink" title="文章推荐列表"></a>文章推荐列表</h3><ul><li>当前公众号内的往期文章</li><li>“你可能喜欢的文章”</li><li>其他合作公众号的推荐文章  </li></ul><p>由于这些列表都是编辑者自己放的，有些情况下其本身是文章中不可删除的内容部分，若一概删除会有内容丢失的风险。</p><h3 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h3><ul><li>公众号的二维码</li><li>私人号的二维码</li><li>打赏用的二维码</li><li>H5页面的二维码</li></ul><p>由于这些二维码都是编辑者自己放的，有些情况下其本身是文章中不可删除的内容部分，若一概删除会有内容丢失的风险。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="lt-head-代码"><a href="#lt-head-代码" class="headerlink" title="&lt;head>代码"></a>&lt;head>代码</h3><ul><li>document.title 获取&lt;title>&lt;/title></li><li>无网站描述</li></ul><h3 id="lt-body-代码"><a href="#lt-body-代码" class="headerlink" title="&lt;body>代码"></a>&lt;body>代码</h3><ul><li>document.getElementById(“activity-name”) 获取 id=”activity-name” 为标题 （分享类文章没有标题）</li><li>document.getElementById(“js_content”) 获取 id=”js_content”为正文部分</li><li>一些全局变量（特殊视频类文章除外）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 浏览器控制台输入 console.log(_ori_article_type,nickname,msg_title,msg_desc)</span><br><span class="line">var _ori_article_type = &quot;文章内容类型&quot;;</span><br><span class="line">var nickname = &quot;公众号名称&quot;;</span><br><span class="line">var msg_title = &quot;文章标题&quot;;</span><br><span class="line">var msg_desc = &quot;文章描述&quot;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="脚本重要代码段"><a href="#脚本重要代码段" class="headerlink" title="脚本重要代码段"></a>脚本重要代码段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var article = new Object();</span><br><span class="line">// 设置文章来源</span><br><span class="line">article.sourcename=&apos;微信公众号&apos;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  // 设置文章标题</span><br><span class="line">  article.title = msg_title;</span><br><span class="line">  // 获取文章描述</span><br><span class="line">  article.summary= msg_desc;</span><br><span class="line">&#125; catch (e)&#123;</span><br><span class="line">  console.log(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 当文章为分享类，点击 阅读原文 按钮 跳转到源文章地址</span><br><span class="line">var shareContent = document.getElementById(&quot;js_share_content&quot;)</span><br><span class="line">var sourceBut = document.getElementById(&quot;js_share_source&quot;);</span><br><span class="line">if (shareContent &amp;&amp; sourceBut) &#123;</span><br><span class="line">  sourceBut.click();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 删除小程序卡片</span><br><span class="line">var deleteElements = document.getElementsByClassName(&quot;weapp_display_element js_weapp_display_element&quot;)</span><br><span class="line">for(var i=0;i&lt;deleteElements.length;i++) &#123;</span><br><span class="line">   deleteElements[i].remove();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取文章内容  </span><br><span class="line">var contentElement = document.getElementById(&apos;js_content&apos;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> puppeteer </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>性能优化专题-理论篇</title>
      <link href="/2018/07/22/performance-theory/"/>
      <url>/2018/07/22/performance-theory/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><strong>Fast is better than slow.</strong>   – <a href="https://www.jianshu.com/p/162454cf2241" target="_blank" rel="noopener">Ten things we know to be true</a></p></blockquote><a id="more"></a><h1 id="优化标准-RAIL模型"><a href="#优化标准-RAIL模型" class="headerlink" title="优化标准-RAIL模型"></a>优化标准-RAIL模型</h1><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ul><li>以用户为中心；最终目标不是让您的网站在任何特定设备上都能运行很快，而是使用户满意。</li><li>立即响应用户；在 100 毫秒以内确认用户输入。</li><li>设置动画或滚动时，在 10 毫秒以内生成帧。</li><li>最大程度增加主线程的空闲时间。</li><li>持续吸引用户；在 1000 毫秒以内呈现交互内容。</li></ul><p>要根据 RAIL 指标评估您的网站，请使用 <a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/" target="_blank" rel="noopener">Chrome DevTools performance</a> 工具记录用户操作。然后根据这些关键 RAIL 指标检查记录时间。</p><h2 id="延迟与用户反应"><a href="#延迟与用户反应" class="headerlink" title="延迟与用户反应"></a>延迟与用户反应</h2><p>让用户成为您的性能工作的中心。用户花在网站上的大多数时间不是等待加载，而是在使用时等待响应。了解用户如何评价性能延迟：</p><style>table th:first-of-type {    width: 150px;}</style><table><thead><tr><th>延迟时间</th><th>用户体验</th></tr></thead><tbody><tr><td>0 ~ 16 ms</td><td>用户可以感知每秒渲染 60 帧的平滑动画转场，也就是每帧 16 毫秒。<br>留给应用大约 10 毫秒的时间来生成一帧。</td></tr><tr><td>0 ~ 100 ms</td><td>在此时间窗口内响应用户操作，他们会觉得可以立即获得结果。时间再长，操作与反应之间的连接就会中断。</td></tr><tr><td>100 ~ 300 ms</td><td>轻微可觉察的延迟。</td></tr><tr><td>300 ~ 1000 ms</td><td>延迟感觉像是任务自然和持续发展的一部分(用户觉得这是正常流，但不会觉得快)。</td></tr><tr><td>1000+ ms (&gt;1s)</td><td>用户的注意力将离开他们正在执行的任务。</td></tr><tr><td>10,000+ ms (&gt;10s)</td><td>用户感到失望，可能会放弃任务；之后他们或许不会再回来。</td></tr></tbody></table><p>Google团队提出了RAIL模型作为优化的目标。 Google把交互的过程分成4个独立的模块，称为 RAIL。RAIL 是一种以用户为中心的性能模型。每个网络应用均具有与其生命周期有关的四个不同方面，且这些方面以不同的方式影响着性能：response （响应）、 animation（动画）、idle（浏览器空置状态）和 load（加载）。<br><img src="/image/performance-theory/RAIL.png" alt="RAIL"></p><h2 id="RAIL模型"><a href="#RAIL模型" class="headerlink" title="RAIL模型"></a>RAIL模型</h2><h3 id=""><a href="#" class="headerlink" title=""></a><span class="label info">response响应 – 在100ms内响应</span></h3><p>在用户注意到滞后之前您有 100 毫秒的时间可以响应用户输入。这适用于大多数输入，不管他们是在点击按钮、切换表单控件还是启动动画。但不适用于触摸拖动或滚动。</p><p><strong>要得到响应式的回应，我们需要：</strong></p><ul><li>输入延迟时间（从按下到绘制）小于 100 毫秒。</li><li>如果最终结果需要花长时间才能得到，就要给一个“加载”的标识来告诉用户“还在处理中”。</li></ul><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><span class="label info">Animation动画 – 在10ms内生成一帧</span></h3><p>在数学上来说，人眼感受到的帧数为60帧/s，则会认为是流畅的动画（1s/60 = 1000ms/60 = 16ms/帧）；也就是说加上每一帧的预算是16ms，减去浏览器绘制帧的时间，留给我们的大约只有10ms/帧。 如果超过这个时间，用户眼中动画的流畅度就会降低。动画包含了以下概念:</p><ul><li>视觉动画 ：这个包括了动画的开始和退出，状态改变时的动画，还有加载标识。 </li><li>滚动 ：当用户开始滚动页面，页面出现猛动的情况。 </li><li>拖拽 ：当我们需要对用户的拖拽交互在100毫秒以内做出响应时，比如平移地图或者缩放屏幕时，我们需要依赖动画。 </li></ul><p><strong>要合理地生成动画，我们需要：</strong></p><ul><li>每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒。 </li></ul><h3 id="-2"><a href="#-2" class="headerlink" title=""></a><span class="label info">IDLE 空闲 – 利用空闲的时间完成推迟的工作</span></h3><p><strong>要合理地应用浏览器空闲时间，我们需要：</strong></p><ul><li>尽可能减少预加载数据，以便您的应用快速加载。不是需要立刻传达给用户的，所以可以在浏览器空闲的时候再处理这些任务。</li><li>推迟的工作应分成每个耗时约 50 毫秒的多个块，因为应用应在 100 毫秒内给出响应。</li><li>如果用户开始交互，优先级最高的事项是响应用户。</li></ul><h3 id="-3"><a href="#-3" class="headerlink" title=""></a><span class="label info">LOAD 加载 – 在1000ms内呈现内容</span></h3><p><strong>页面加载时间是最常见的性能话题。 要尽快将页面加载出来，我们需要：</strong></p><ul><li>把最需要传达的、对用户来说最有意义的内容在 1000ms 内渲染出来。</li><li>要持续响应用户，绝对不允许出现在滚动页面、轻触或者看动画的时候卡顿。</li><li>优先考虑关键渲染路径，将所有不需要在加载时处理的任务延迟到浏览器空闲时再处理（或根据需求拦加载）。 </li></ul><hr><h1 id="相关原理"><a href="#相关原理" class="headerlink" title="相关原理"></a>相关原理</h1><h2 id="浏览器渲染进程"><a href="#浏览器渲染进程" class="headerlink" title="浏览器渲染进程"></a>浏览器渲染进程</h2><p>要想知道网页会卡顿在哪个阶段、哪些阶段可以进行性能优化，那么必须要对浏览器的渲染流程有个大体的了解。废话不多说，直接进入正题。</p><h3 id="浏览器的渲染进程是多线程的"><a href="#浏览器的渲染进程是多线程的" class="headerlink" title="浏览器的渲染进程是多线程的"></a>浏览器的渲染进程是多线程的</h3><h4 id="-4"><a href="#-4" class="headerlink" title=""></a><span class="label info">GUI渲染线程</span></h4><ul><li>负责渲染浏览器界面，解析HTML，CSS，构建DOM树和RenderObject树，布局和绘制等。</li><li>当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行。</li><li>注意，<strong>GUI渲染线程与JS引擎线程是互斥的</strong>，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中 <strong>等到JS引擎空闲时</strong>立即被执行。</li></ul><h4 id="-5"><a href="#-5" class="headerlink" title=""></a><span class="label info">JS引擎线程</span></h4><ul><li>也称为JS内核，负责处理Javascript脚本程序，例如V8引擎。</li><li>JS引擎线程负责解析Javascript脚本，运行代码。</li><li>JS引擎一直等待着任务队列中任务的到来，然后加以处理，一个Tab页（renderer进程）中无论什么时候都只有一个JS线程在运行JS程序。</li><li>同样注意，<strong>GUI渲染线程与JS引擎线程是互斥的</strong>，所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。</li></ul><h4 id="-6"><a href="#-6" class="headerlink" title=""></a><span class="label info">事件触发线程</span></h4><ul><li>归属于浏览器而不是JS引擎，用来控制事件循环（可以理解，JS引擎自己都忙不过来，需要浏览器另开线程协助）。</li><li>当JS引擎执行代码块如setTimeOut时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件线程中。</li><li>当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。</li><li>注意，由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）。</li></ul><h4 id="-7"><a href="#-7" class="headerlink" title=""></a><span class="label info">定时触发器线程</span></h4><ul><li>传说中的setInterval与setTimeout所在线程。</li><li>浏览器定时计数器并不是由JavaScript引擎计数的,（因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确）。</li><li>因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待JS引擎空闲后执行）。</li><li>注意，W3C在HTML标准中规定，规定要求setTimeout中低于4ms的时间间隔算为4ms。</li></ul><h4 id="-8"><a href="#-8" class="headerlink" title=""></a><span class="label info">异步http请求线程</span></h4><ul><li>在XMLHttpRequest在连接后是通过浏览器新开一个线程请求。</li><li>将检测到状态变更时，如果设置有回调函数，异步线程就 <strong>产生状态变更事件</strong>，将这个回调再放入事件队列中。再由JavaScript引擎执行。</li></ul><h3 id="浏览器渲染流程"><a href="#浏览器渲染流程" class="headerlink" title="浏览器渲染流程"></a>浏览器渲染流程</h3><ul><li>浏览器输入url，浏览器主进程接管，开一个下载线程。</li><li>然后进行http请求（略去DNS查询，IP寻址等等操作）。</li><li>接着等待响应，获取内容。</li><li>随后将内容通过RendererHost接口转交给Renderer进程，接着浏览器渲染流程开始。</li></ul><p><img src="/image/performance-theory/render.png" alt="render"></p><ol><li>处理 HTML 标记并构建 DOM 树、处理 CSS 标记并构建 CSSOM 树 。</li><li>结合DOM树和CSSDOM树形成render树， 也就是渲染树。</li><li>布局render树（Layout/reflow），负责各元素尺寸、位置的计算。</li><li>绘制render树（paint），绘制页面像素信息。</li><li>浏览器会将各层的信息发送给GPU，GPU会将各层合成（composite），显示在屏幕上。</li></ol><p><strong><em>优化关键渲染路径</em>就是指最大限度缩短执行上述第 1 步至第 5 步耗费的总时间</strong></p><hr><h1 id="性能检测工具"><a href="#性能检测工具" class="headerlink" title="性能检测工具"></a>性能检测工具</h1><h2 id="Chrome-Devtools-–-Network"><a href="#Chrome-Devtools-–-Network" class="headerlink" title="Chrome Devtools – Network"></a>Chrome Devtools – Network</h2><blockquote><p>使用网络面板可以了解请求和下载的资源文件并优化网页加载性能。</p></blockquote><h3 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h3><p>打开Chrome Devtools，选择Network标签。</p><h3 id="Request-Table-请求列表"><a href="#Request-Table-请求列表" class="headerlink" title="Request Table 请求列表"></a>Request Table 请求列表</h3><p>该视窗列出了所有的资源请求，默认按时间顺序排序，点击某个资源，可以查看更详细的信息：</p><ul><li>Headers：请求头信息和响应头信息。</li><li>Preview：预览结果。</li><li>Response：从服务器返回的响应结果。</li><li>Cookies：请求和响应的Cookie。</li><li>Timing：查看资源请求的生命周期。<ul><li>Queueing：浏览器会在以下情况对请求进行排队：有更高优先级的请求；在这个域下，已经有6个TCP连接了，达到Chrome最大限制数量。此条规则仅适用 在HTTP/1.0和HTTP/1.1。</li><li>Stalled：发送请求之前等待的时间。它可能因为进入队列的任意原因而被阻塞。这个时间包括代理协商的时间。</li><li>Proxy negotiation：浏览器与代理服务器协商消耗的时间。</li><li>DNS Lookup：浏览器对请求的IP地址进行DNS查找所消耗的时间。</li><li>Initial conncection：发起连接所消耗的时间。</li><li>Request sent：请求发送消耗的时间。</li><li>Waiting (TTFB)：浏览器等待响应的时间，TTFB表示 Time To First Byte。</li><li>Content Download：资源下载所消耗的时间。</li></ul></li></ul><h3 id="Summary-总览"><a href="#Summary-总览" class="headerlink" title="Summary 总览"></a>Summary 总览</h3><p>面板底部汇总了请求数量，传输数据大小，加载时间等信息,从左往右依次显示为：</p><ul><li>X requests：请求总个数。</li><li>X transferred：所有请求的大小。</li><li>Finish：加载完毕时间， 是页面上所有 http 请求发送到响应完成的时间。</li><li>DOMContentLoaded： DOM树构建完成时间。它在两个地方都有体现：概览视窗的蓝色竖线，总览视窗的触发时间。</li><li>Load：所有资源加载完成的时间。它在三个地方有体现：概览视窗的红色竖线，请求列表视窗的红色竖线，总览视窗的触发时间。</li></ul><blockquote><p>结合DOM文档加载的加载步骤，DOMContentLoaded事件/Load事件触发时机如下：<br>1、解析HTML结构。<br>2、加载外部脚本和样式表文件。<br>3、解析并执行脚本代码。        // 部分脚本会阻塞页面的加载<br>4、DOM树构建完成。            //DOMContentLoaded 事件<br>5、加载图片等外部文件。<br>6、页面加载完毕。             //load 事件</p></blockquote><h2 id="Chrome-Devtools-–-Performance"><a href="#Chrome-Devtools-–-Performance" class="headerlink" title="Chrome Devtools –  Performance"></a>Chrome Devtools –  Performance</h2><blockquote><p>使用性能面板可以通过记录和查看网站生命周期内发生的各种事件来提高页面的运行时性能。</p></blockquote><h3 id="打开-1"><a href="#打开-1" class="headerlink" title="打开"></a>打开</h3><ol><li>打开<a href="https://googlechrome.github.io/devtools-samples/jank/" target="_blank" rel="noopener">指定网页</a>， 打开Chrome Devtools，然后选择Performance标签。</li><li>点击【record】开始录制，或点击reload按钮录制页面载入过程。</li><li>稍等片刻就会出现检测结果。</li></ol><h3 id="分析结果-–-分析每一秒的帧"><a href="#分析结果-–-分析每一秒的帧" class="headerlink" title="分析结果 – 分析每一秒的帧"></a>分析结果 – 分析每一秒的帧</h3><p>FPS（frames per second）是用来分析动画的一个主要性能指标。能保持在60的FPS的话，那么用户体验就是不错的。</p><ol><li>观察FPS图表，如果你发现了一个红色的长条，那么就说明这些帧存在严重问题，有可能导致非常差的用户体验。一般来说，绿色的长条越高，说明FPS越高，用户体验越好。<br><img src="/image/performance-theory/tool-fps.png" alt="FPS"></li><li>在Frames图表中，把鼠标移动到绿色条状图上，Devtools会展示这个帧的FPS。<br><img src="/image/performance-theory/tool-frames.png" alt="Frames"></li><li>勾选顶部的screenShots就可以看到各个时间点的界面截图，可以用来分析动画的各个细节。</li><li>另外一个好用的小工具就是实时FPS面板，它可以实时展示页面的FPS指标。<ul><li>打开more tools 里面 Randering面板，勾选 FPSmeter，FPS实时面板就出现在页面的右上方了。</li></ul></li><li>就在FPS图表下方，你会看到CPU图表。<ul><li>在CPU图表中的各种颜色与Summary面板里的颜色是相互对应的，Summary面板就在Performance面板的下方。</li><li>CPU图表中的各种颜色代表着在这个时间段内，CPU在各种处理上所花费的时间。</li><li>如果你看到了某个处理占用了大量的时间，那么这可能就是一个可以找到性能瓶颈的线索。详细看<a href="https://zhaoluting.github.io/2017/10/12/devTool/">Chrome调试指南</a>。<br><img src="/image/performance-theory/tool-cpu.png" alt="CPU"></li></ul></li><li>展开Main图表，Devtools展示了主线程运行状况。<ul><li>X轴代表着时间。每个长条代表着一个event,长条越长就代表这个event花费的时间越长。</li><li>Y轴代表了调用栈。在栈里，上面的event调用了下面的event。<br><img src="/image/performance-theory/tool-main.png" alt="Main"></li></ul></li></ol><h2 id="Chrome-Devtools-–-Audits"><a href="#Chrome-Devtools-–-Audits" class="headerlink" title="Chrome Devtools –  Audits"></a>Chrome Devtools –  Audits</h2><blockquote><p>Audit标签使用了Google开源的一个自动化测试工具 – Lighthouse。可对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。</p></blockquote><h3 id="打开-2"><a href="#打开-2" class="headerlink" title="打开"></a>打开</h3><p>注意：这个工具需要翻墙，不然会卡在“lighthouse is warming up”。</p><ol><li>打开Chrome Devtools，然后选择Audits标签。</li><li>点击【Perform an audit…】，一般只检查【Performance】和【Best practices】即可，接着点击 Run audit 。</li><li>只需要等待一会儿，我们就完成了性能检查并且能把它当成衡量指标来提升网站的性能。</li></ol><h3 id="分析结果-综合分析"><a href="#分析结果-综合分析" class="headerlink" title="分析结果 - 综合分析"></a>分析结果 - 综合分析</h3><ul><li><span class="label info">Metrics 指标</span> —— Metrics下列举了基本的性能指标，并且给出页面加载时间的概览。<ul><li><strong>First meaningful paint</strong> —— 首次有效绘制：代表用户看到初始内容所需的时间。请尽量让它的值小于1秒。</li><li><strong>First interactive</strong> —— 首次互动：代表可交互元素从展示到响应所需的时间，即cpu有空闲能力来处理用户交互操作的时间。</li><li><strong>Consistently Interactive</strong> —— 持续互动：页面中的大多数网络资源完成加载并且CPU在很长一段时间都很空闲的所需的时间。</li><li><strong>Perceptual Speed Index</strong> —— 速度指标：页面加载性能指标，页面展示可见部分所需时间的平均值。以毫秒为单位并且取决于窗口的大小，应尽量减少到1250毫秒以内。</li><li><strong>Estimated Input Latency</strong> —— 预计输入延迟时间： 应用有 100 毫秒的时间响应用户输入。如果超过此时间，用户就会认为应用反应迟缓。</li></ul></li><li><span class="label info">Opportunities 可优化项</span> —— 这项里面的内容指的是LightHouse发现的一些可以直接优化的点，你可以对应这些点来进行优化。</li><li><span class="label info">Diagnostics 手动诊断项目</span> —— 这些项目表示LightHouse并不能替你决定当前是好是坏，但是把详情列出来，由你手动排查每个项目的情况。</li><li><span class="label info">Passed Audits 通过的审查项目</span> —— 这里列出的都是你做的好的地方，比如：减少阻塞渲染的脚本、图片懒加载、样式脚本压缩等等。</li><li><span class="label info">Best Practice 最佳实践</span> —— 本项指标是指LightHouse用业界公认的几项最佳实践来评估站点。</li></ul><h2 id="其他检测工具推荐"><a href="#其他检测工具推荐" class="headerlink" title="其他检测工具推荐"></a>其他检测工具推荐</h2><p>性能检测方面，Chrome DevTools已经很强大了，完全够用，除了我们常用的network、performance、auditing，More tools里面的Rendering、JavaScript Profiler、performance monitor等工具也很强大，所以，我就稍微介绍下其他工具：</p><ul><li><a href="https://www.cnblogs.com/strick/p/6677836.html" target="_blank" rel="noopener">WebPageTest</a>，很强大，也很复杂，有兴趣的可以去研究下；</li><li><a href="https://tools.pingdom.com/" target="_blank" rel="noopener">tools.pingdom.com</a> 可在线检测，兼具了Audits与Network标签对应的功能。</li></ul><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://developers.google.com/web/fundamentals/performance/rail" target="_blank" rel="noopener">RAIL</a><br><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/" target="_blank" rel="noopener">关键渲染路径</a><br><a href="https://segmentfault.com/a/1190000012925872" target="_blank" rel="noopener">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a><br><a href="https://developers.google.com/web/tools/chrome-devtools/" target="_blank" rel="noopener">chrome-devtools官方文档</a><br><a href="https://www.breakyizhan.com/chromeconsole/1249.html" target="_blank" rel="noopener">Chrome 谷歌浏览器的开发者工具-Break驿站</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> performance </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常规eslint配置</title>
      <link href="/2018/07/22/eslint/"/>
      <url>/2018/07/22/eslint/</url>
      
        <content type="html"><![CDATA[<h2 id="eslint配置过程"><a href="#eslint配置过程" class="headerlink" title="eslint配置过程"></a>eslint配置过程</h2><h3 id="安装需要依赖的npm包"><a href="#安装需要依赖的npm包" class="headerlink" title="安装需要依赖的npm包"></a>安装需要依赖的npm包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"eslint"</span>: <span class="string">"^4.19.1"</span>, <span class="comment">// 必须</span></span><br><span class="line"><span class="string">"babel-eslint"</span>: <span class="string">"^8.2.4"</span>, <span class="comment">// 支持babel</span></span><br><span class="line"><span class="string">"eslint-loader"</span>: <span class="string">"^2.0.0"</span>, <span class="comment">// 使webpack支持eslint</span></span><br><span class="line"><span class="string">"eslint-config-google"</span>: <span class="string">"^0.9.1"</span>, <span class="comment">// Google的ESLint可共享配置</span></span><br><span class="line"><span class="string">"eslint-plugin-vue"</span>: <span class="string">"^4.5.0"</span>, <span class="comment">// Vue.js的官方ESLint插件</span></span><br><span class="line"><span class="string">"eslint-plugin-import"</span>: <span class="string">"^2.13.0"</span>, <span class="comment">// 支持使用第三方的扩展</span></span><br></pre></td></tr></table></figure><p><strong>项目下运行命令行</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev eslint@4.19.1 babel-eslint@8.2.4 eslint-loader@2.0.0 eslint-config-google@0.9.1 eslint-plugin-vue@4.5.0 eslint-plugin-import@2.13.0</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="在项目最外层新建并编辑-eslintrc-js文件"><a href="#在项目最外层新建并编辑-eslintrc-js文件" class="headerlink" title="在项目最外层新建并编辑.eslintrc.js文件"></a>在项目最外层新建并编辑.eslintrc.js文件</h3><p><strong>加入以下代码</strong>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 默认情况下，ESLint会在所有父级组件中寻找配置文件，一直到根目录。ESLint一旦发现配置文件中有 "root": true，它就会停止在父级目录中寻找。</span></span><br><span class="line">    <span class="string">"root"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 扩展流行的风格指南</span></span><br><span class="line">    <span class="string">"extends"</span>: [<span class="string">"plugin:vue/recommended"</span>, <span class="string">'plugin:vue/essential'</span>, <span class="string">"eslint:recommended"</span>, <span class="string">"google"</span>],</span><br><span class="line">    <span class="comment">// 此插件用来识别.html 和 .vue文件中的js代码</span></span><br><span class="line">    <span class="string">"plugins"</span>: [<span class="string">"import"</span>, <span class="string">"vue"</span>],</span><br><span class="line">    <span class="comment">// 对Babel解析器的包装使其与 ESLint 兼容。</span></span><br><span class="line">    <span class="string">"parserOptions"</span>: &#123;<span class="string">"parser"</span>: <span class="string">"babel-eslint"</span>&#125;,</span><br><span class="line">    <span class="comment">// 自己的个性化规则</span></span><br><span class="line">    <span class="string">"rules"</span>: &#123;</span><br><span class="line">        <span class="comment">// 禁用 switch 中冒号前后的空格规则</span></span><br><span class="line">        <span class="string">"switch-colon-spacing"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用 jsdoc 规则</span></span><br><span class="line">        <span class="string">"require-jsdoc"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用每行字数限制规则</span></span><br><span class="line">        <span class="string">"max-len"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 允许打 console.log</span></span><br><span class="line">        <span class="string">"no-console"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 允许使用debugger语句</span></span><br><span class="line">        <span class="string">"no-debugger"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用代码块首尾必须要空行的规则</span></span><br><span class="line">        <span class="string">"padded-blocks"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 不检查行尾空格</span></span><br><span class="line">        <span class="string">"no-trailing-spaces"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 使用 === 替代 ==</span></span><br><span class="line">        <span class="string">"eqeqeq"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"vue/no-parsing-error"</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">            <span class="comment">// 关闭标签闭合检查 </span></span><br><span class="line">            <span class="string">"x-invalid-end-tag"</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><blockquote><p>“off” 或 0       =&gt; 关闭规则<br>“warn” 或 1      =&gt;开启规则，使用警告级别的错误：warn (不会导致程序退出)<br>“error” 或 2     =&gt;开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</p></blockquote><p><strong>如果在webpack.config文件中设置了resolver配置，那么还需要:</strong></p><ul><li><p>安装<a href="https://www.npmjs.com/package/eslint-import-resolver-webpack" target="_blank" rel="noopener">eslint-import-resolver-webpack</a>依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i --save-dev eslint-import-resolver-webpack@0.10.1</span><br></pre></td></tr></table></figure></li><li><p>默认情况下，会从项目的compile/webpack.base.config.js文件中寻找webpack的resolver配置，但是这并不一定准确，因此可以自己重新配置正确的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="string">"extends"</span>: [<span class="string">"plugin:vue/recommended"</span>, <span class="string">'plugin:vue/essential'</span>, <span class="string">"eslint:recommended"</span>, <span class="string">"google"</span>],</span><br><span class="line">    <span class="string">"settings"</span>: &#123;</span><br><span class="line">        <span class="string">'import/resolver'</span>: &#123;</span><br><span class="line">            webpack: &#123;</span><br><span class="line">                config: <span class="string">'compile/webpack.base.conf.js'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="在webpack-config-js文件中添加配置"><a href="#在webpack-config-js文件中添加配置" class="headerlink" title="在webpack.config.js文件中添加配置"></a>在webpack.config.js文件中添加配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx|vue)$/</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="visio-studio-code-配置eslint"><a href="#visio-studio-code-配置eslint" class="headerlink" title="visio studio code 配置eslint"></a>visio studio code 配置eslint</h3><p><strong>如果想在代码编写时 使编辑器将错误代码用红色波浪线标出 并提示错误，那么就可以做下面几步：</strong></p><ol><li>左侧菜单栏选择“扩展”，搜索“eslint”、“Vetur”安装并重新加载</li><li><p>配置vscode实现对.vue .html文件中的js代码段的检测： 顶部选项Code -&gt; 首选项 -&gt; 设置，搜索编辑“eslint.validate”添加 “html”,”vue”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"eslint.validate"</span>: [</span><br><span class="line">      <span class="string">"javascript"</span>,</span><br><span class="line">      <span class="string">"javascriptreact"</span>,</span><br><span class="line">      <span class="string">"html"</span>,</span><br><span class="line">      <span class="string">"vue"</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>可以打开项目中.vue文件，不规范的语法就都已经被红色波浪线标记出来了。</p></li></ol><h2 id="eslint修改技巧"><a href="#eslint修改技巧" class="headerlink" title="eslint修改技巧"></a>eslint修改技巧</h2><h3 id="eslint-–-fix-修复指令"><a href="#eslint-–-fix-修复指令" class="headerlink" title="eslint – fix 修复指令"></a>eslint – fix 修复指令</h3><ul><li><p>检查并修复项目所有代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/eslint --fix *</span><br></pre></td></tr></table></figure></li><li><p>检查并修复指定文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/eslint --fix app.js</span><br></pre></td></tr></table></figure></li><li><p><strong>tips: 如果直接运行  eslint – fix  会报 Cannot find module ‘@u51/eslint-config-web’ 的错误。</strong>  </p><blockquote><p>config文件是安装在当前项目，直接eslint –fix file调用的是全局的eslint，所以无法找到当前项目的config文件。故使用 node_modules/.bin/eslint –fix 。</p></blockquote></li></ul><h3 id="vscode-保存自动格式化eslint代码"><a href="#vscode-保存自动格式化eslint代码" class="headerlink" title="vscode 保存自动格式化eslint代码"></a>vscode 保存自动格式化eslint代码</h3><ul><li><p>进入【设置】加上以下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"vetur.format.defaultFormatter.html"</span>: <span class="string">"js-beautify-html"</span>, <span class="comment">// 格式化.vue中html</span></span><br><span class="line">    <span class="string">"vetur.format.defaultFormatter.js"</span>: <span class="string">"vscode-typescript"</span>, <span class="comment">// 让vue中的js按编辑器自带的ts格式进行格式化</span></span><br><span class="line">    <span class="string">"eslint.enable"</span>: <span class="keyword">true</span>,</span><br><span class="line">    <span class="string">"eslint.autoFixOnSave"</span>:<span class="keyword">true</span>, <span class="comment">// 保存时自动fix</span></span><br><span class="line">    <span class="string">"eslint.run"</span>: <span class="string">"onType"</span>,</span><br><span class="line">    <span class="string">"eslint.options"</span>: &#123;<span class="string">"extensions"</span>: [<span class="string">".js"</span>,<span class="string">".vue"</span>]&#125;,</span><br><span class="line">    <span class="string">"eslint.validate"</span>: [</span><br><span class="line">        <span class="string">"javascript"</span>,</span><br><span class="line">        <span class="string">"javascriptreact"</span>,</span><br><span class="line">        <span class="string">"html"</span>,</span><br><span class="line">        &#123;<span class="string">"language"</span>: <span class="string">"vue"</span>, <span class="string">"autoFix"</span>: <span class="keyword">true</span>&#125; <span class="comment">//开启对.vue文件中错误的检查</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启后，右键“格式化文件”或者修改文件后点击“保存”，就可自动格式化代码了。</p></li></ul><h3 id="忽略ESLint检测"><a href="#忽略ESLint检测" class="headerlink" title="忽略ESLint检测"></a>忽略ESLint检测</h3><p>如果需要修改代码量太大，可以先将未修改的文件忽略掉，以后逐步修改。</p><ul><li><p>新建.eslintignore文件，放置需要ESLint忽略的文件。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">src/components/input-tag.vue</span><br></pre></td></tr></table></figure></li><li><p>将 <span class="label success">/* eslint-disable */</span>块注释放在文件顶部，可以在整个文件范围内禁止规则出现警告。</p></li><li><span class="label success">// eslint-disable-next-line</span> 可关闭下一行校验。</li></ul><h3 id="命令行检测、修改文件"><a href="#命令行检测、修改文件" class="headerlink" title="命令行检测、修改文件"></a>命令行检测、修改文件</h3><ul><li><p>打开package.json，在script里加入:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -ext 后面写上指定检测文件的后缀，紧接着写上要检测的目录，即可用命令行来检测。</span></span><br><span class="line"><span class="string">"lint"</span>: <span class="string">"eslint --ext .js,.jsx,.vue src/"</span>,</span><br><span class="line"><span class="comment">// 加上--fix，即可在检测的同时将文件自动格式化。</span></span><br><span class="line"><span class="string">"lint-fix"</span>: <span class="string">"eslint --fix --ext .js,.jsx,.vue src/"</span>,</span><br></pre></td></tr></table></figure></li><li><p>终端运行 <span class="label default">npm run lint</span> 或者 <span class="label default">npm run lint-fix</span></p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/default.md" target="_blank" rel="noopener">eslint规则说明</a><br><a href="http://eslint.cn/" target="_blank" rel="noopener">ESLint官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何提高前端的自测能力</title>
      <link href="/2018/06/27/slefTest/"/>
      <url>/2018/06/27/slefTest/</url>
      
        <content type="html"><![CDATA[<p><div class="note info">一个小菜鸟的感悟与总结</div></p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><span class="label success"> // 最常见的三种测试类型。单元测试主要由开发人员来做，功能测试与集成测试由测试人员来做。</span><p><strong>单元测试</strong>：指对软件中的最小可测试单元进行检查和验证；<br><strong>功能测试</strong>：对产品的各功能进行验证，根据功能测试用例，逐项测试，检查产品是否达到用户要求的功能；<br><strong>集成测试</strong>：也叫组装测试或联合测试。在单元测试的基础上，将所有模块按照设计要求（如根据结构图〕组装成为子系统或系统，进行集成测试；</p><a id="more"></a><span class="label success"> // 客户端主要是用黑盒测试，服务端主要用白盒测试，灰盒测试比较少用。</span><p><strong>黑盒测试</strong>：也称功能测试，把程序看作一个不能打开的黑盒子，在完全不考虑程序内部结构和内部特性的情况下，在程序接口进行测试，它只检查程序功能是否按照需求规格说明书的规定正常使用，程序是否能适当地接收输入数据而产生正确的输出信息。<br><strong>白盒测试</strong>：也称结构测试或逻辑驱动测试，它是知道产品内部工作过程，可通过测试来检测产品内部动作是否按照规格说明书的规定正常进行，按照程序内部的结构测试程序，检验程序中的每条通路是否都有能按预定要求正确工作。<br><strong>灰盒测试</strong>：介于黑盒白盒二者之间，灰盒测试关注输出对于输入的正确性，同时也关注内部表现，但这种关注不象白盒那样详细、完整，只是通过一些表征性的现象、事件、标志来判断内部的运行状态。有时候输出是正确的，但内部其实已经错误了，这种情况非常多。</p><h2 id="前端自测三个方面"><a href="#前端自测三个方面" class="headerlink" title="前端自测三个方面"></a>前端自测三个方面</h2><p>1、界面交互是否符合要求、逻辑<br>2、接口请求是否正确<br>3、数据展示是否准确</p><h2 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h2><ul><li><strong>公用记录型</strong>：JIRA（推荐）、wiki（没有测试人员时可以简单记在wiki上）</li><li><strong>自用记录型</strong>：mac自带备忘录、有道云笔记、Excel、XMind</li><li><strong>接口测试工具</strong>：swagger、postman</li><li><strong>代码内部测试工具</strong>：eslint、karma 等等</li></ul><h2 id="平时积累的技巧"><a href="#平时积累的技巧" class="headerlink" title="平时积累的技巧"></a>平时积累的技巧</h2><h3 id="问（很重要）"><a href="#问（很重要）" class="headerlink" title="问（很重要）"></a>问（很重要）</h3><span class="label success"> // 公司测试小哥说这点是最重要。</span><ul><li>问清楚项目需求，对需求理解透彻；</li><li>向经验丰富的开发、测试人员讨教经验；</li><li>询问用户的使用体验及意见；</li></ul><h3 id="列"><a href="#列" class="headerlink" title="列"></a>列</h3><ul><li>需求点要清楚得罗列出来，产品或者后端没有罗列就自己罗列。</li><li>每做完一个需求就做个标记，每提一个bug也要列进去。</li><li>优点是整个开发过程会很清晰，日后排期、更改需求也有参照，有据可循。</li><li>缺点就是费时。</li></ul><blockquote><p>例如下图，需求多时，花点时间理清思路，用markdown等工具列出来：</p></blockquote><p><img src="/image/selfTest/list.png" alt="罗列需求"></p><blockquote><p>又例如下图（优化与修复），有较多bug或优化点时，用wiki做一个表格，方便产品验收：</p></blockquote><p><img src="/image/selfTest/bugList.png" alt="罗列Bug">  </p><h3 id="写"><a href="#写" class="headerlink" title="写"></a>写</h3><ul><li>代码里多写备注，readme文件不能偷懒，不留坑也方便转手；</li><li>commit 多打字，提交历史会很清晰；</li><li>发布系统里不随便填写信息，需求列表会很清楚；<br><img src="/image/selfTest/featList.png" alt="需求列表">  </li></ul><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><ul><li>每次提交代码前利用工具检查修改过的内容。（全局搜下有没有未去掉的debugger，搜“&lt;&lt;&lt;&lt;&lt;”看有没有冲突代码）;<br><img src="/image/selfTest/code.png" alt="代码">  </li><li>发布前有时间就顺手检查下提交历史;<br><img src="/image/selfTest/gitlab.png" alt="代码">  </li></ul><h3 id="学"><a href="#学" class="headerlink" title="学"></a>学</h3><ul><li>多学习其他优秀系统的交互与设计，对比思考自己做的那些系统的不足；</li><li>平时多学习交互规范、用户体验设计类的书籍，让自己更加专业；</li></ul><p><strong>论坛网站</strong>：<a href="http://bbs.51testing.com/forum.php" target="_blank" rel="noopener">51testing软件测试论坛</a><br><strong>学习文档</strong>：软件工程中的测试技术(第一部分).pdf、软件工程中的测试技术(第二部分).pdf<br><strong>测试相关的学习资料不是很多</strong>，主要还是靠平时实践的积累，理论的话看上面的《软件工程中的测试技术》就差不多了。</p><h2 id="几个常用组件的checklist"><a href="#几个常用组件的checklist" class="headerlink" title="几个常用组件的checklist"></a>几个常用组件的checklist</h2><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><ul><li><strong>各种<span class="label success">数据类型</span>的输入情况:</strong> 全汉字输入、全英文输入、全字符输入、全数字输入、混搭输入、大小写处理、半/全角输入;</li><li><strong>数字需要关注<span class="label success">边界值</span>:</strong> 最大/小值、正/负数、小数点保留位;</li><li><strong>不同的输入<span class="label success">文本长度</span>:</strong>为空、文本溢出、文本未溢出;</li><li><strong>输入框<span class="label success">校验规则</span>:</strong>为空校验、数据类型校验、正则检测、多个数据之间大小校验;</li><li><strong>保障<span class="label success">数据准确性</span>:</strong>输入输出结果是否一致、数据是否进行处理;</li><li><strong><span class="label success">隐藏部分</span>的显示:</strong>选择下拉框的文本显示溢出情况、日期时间选择框是否超出屏幕、选择下拉框数据量过大的情况;</li><li><strong><span class="label success">操作按钮</span>检查:</strong>字段完整性检查、快键建检查、回车键检查、重复提交检查;</li><li><strong><span class="label success">安全性</span>检查:</strong>恶意代码注入;</li><li><strong>屏幕大小不同情况下的<span class="label success">自适应</span>:</strong>浏览器置于桌面、浏览器全屏、浏览器投放至大显;</li></ul><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><ul><li><strong>各种<span class="label success">数据类型</span>的显示情况:</strong> 全汉字、全英文、全字符、全数字、混搭、大小写识别;</li><li><strong>不同<span class="label success">文本长度</span>:</strong> 为空、短文本、超长文本、数字位数保留;</li><li><strong>保障<span class="label success">数据准确性</span>:</strong> 显示结果是否正确、是否进行格式/映射处理、映射为空时的情况;</li><li><strong><span class="label success">脱敏情况</span>:</strong>身份证号、手机等数据是否脱敏完全;</li><li><strong>屏幕大小不同情况下的<span class="label success">自适应</span>:</strong>浏览器置于桌面、浏览器全屏、浏览器投放至大显;</li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><ul><li><strong><span class="label success">表格展示</span>情况:</strong>列表为空、列数过多、数据量过大、loading状态、是否错位;</li><li><strong>单元格内不同<span class="label success">文本长度</span>:</strong>为空、文本溢出、文本未溢出;</li><li><strong>单元格内各种<span class="label success">数据类型</span>的显示情况:</strong>全汉字、全英文、全字符、全数字、混搭;</li><li><strong>保障<span class="label success">数据准确性</span></strong>:<ul><li>单元格显示结果是否正确、是否进行格式/映射处理、映射为空时的情况;</li><li>整个表格数据分页是否准确、选中时结果是否一致、筛选排序结果是否正确;</li></ul></li><li><strong>屏幕大小不同情况下的<span class="label success">自适应</span>:</strong>浏览器置于桌面、浏览器全屏、浏览器投放至大显;</li></ul><h3 id="附件上传"><a href="#附件上传" class="headerlink" title="附件上传"></a>附件上传</h3><ul><li><strong><span class="label success">附件显示情况</span>:</strong>不同尺寸文件预览的显示、不同文件格式预览的显示、文件预览失败/不存在时的显示、文件预览加载过慢的情况;</li><li><strong><span class="label success">附件准确性</span>:</strong>是否错位展示;</li><li><strong><span class="label success">安全性</span>检查:</strong>上传时脚本后缀改为图片等格式（文件内容校验）;</li><li><strong>屏幕大小不同情况下的<span class="label success">自适应</span>:</strong>浏览器置于桌面、浏览器全屏、浏览器投放至大显;</li></ul>]]></content>
      
      
      <categories>
          
          <category> 能力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>node.js的异步IO机制</title>
      <link href="/2018/05/29/asynchronous/"/>
      <url>/2018/05/29/asynchronous/</url>
      
        <content type="html"><![CDATA[<h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><p><strong>单线程</strong>、<strong>异步非阻塞I/O</strong>、<strong>事件驱动</strong> 是Node.js的三大闪光点。其中，理解异步非阻塞I/O模型是学习node过程中的一大难点。</p><a id="more"></a><h3 id="什么是I-O"><a href="#什么是I-O" class="headerlink" title="什么是I/O"></a>什么是I/O</h3><p>I/O在计算机中指Input/Output，也就是输入和输出，分为I/O设备和I/O接口两个部分。</p><ul><li>I/O接口是CPU和I/O设备之间交换信息的媒介和桥梁。由于程序和运行时数据是在内存中驻留，由CPU这个超快的计算核心来执行，涉及到数据交换的地方，通常是磁盘、网络等。</li><li>现代计算机系统中配置了大量的外围设备，即I/O设备。通常进行如下分类：<ul><li>字符设备，又叫做人机交互设备，例如，键盘和显示器为一体的字符终端、打印机、鼠标等。</li><li>块设备，又叫外部存储器，用户通过这些设备实现程序和数据的长期保存，如磁盘、光盘等。</li><li>网络通信设备。这类设备主要有网卡、调制解调器等，主要用于与远程设备的通信。</li></ul></li></ul><h3 id="同步与异步I-O"><a href="#同步与异步I-O" class="headerlink" title="同步与异步I/O"></a>同步与异步I/O</h3><p>由于CPU和内存的速度远远高于外设的速度，所以，在I/O编程中，就存在速度严重不匹配的问题。比如要把100M的数据写入磁盘，CPU输出100M的数据只需要0.01秒，可是磁盘要接收这100M数据可能需要10秒，怎么办呢？有两种办法：</p><ul><li>同步I/O：CPU等待，也就是程序暂停执行后续代码，等100M的数据在10秒后写入磁盘，再接着往下执行。</li><li>异步I/O：CPU不等待，后续代码可以立刻接着执行。<ul><li>实现方式1：主动轮询异步调用的结果。</li><li>实现方式2：被调用方通过callback来通知调用方调用结果。</li></ul></li></ul><blockquote><p>同步和异步是一种通信机制，涉及到调用方和被调用方，关注的是I/O操作的执行过程及结果的返回方式，不同点在于双方在这两个方面的行为方式。</p></blockquote><h3 id="阻塞与非阻塞I-O"><a href="#阻塞与非阻塞I-O" class="headerlink" title="阻塞与非阻塞I/O"></a>阻塞与非阻塞I/O</h3><ul><li>阻塞I/O：调用结果返回之前，该执行线程会被挂起，不释放CPU执行权，线程不能做其它事情，只有等到调用结果返回了，才能接着往下执行</li><li>非阻塞I/O：在没有获取调用结果时，线程可以往下执行，而不是等待。<ul><li>如果是同步的，会通过轮询的方式检查有没有调用结果返回；</li><li>如果是异步的，会通知回调。</li></ul></li></ul><blockquote><p>阻塞和非阻塞是一种调用机制，只涉及到调用方，关注的是I/O操作的执行状态，不同点在于请求I/O操作后，针对I/O操作的状态，调用方的行为方式。</p></blockquote><h3 id="举个🌰"><a href="#举个🌰" class="headerlink" title="举个🌰"></a>举个🌰</h3><p>故事：老张烧开水。<br>出场人物：老张，普通水壶，会响的水壶。</p><ol><li>老张把水壶放到火上，立等水开。<strong>（同步阻塞）</strong> </li><li>老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。<strong>（同步非阻塞）</strong>     </li><li>老张买了把会响笛的水壶。水开之后能发出嘀~~~~的噪音。老张把响水壶放火上，立等水开。<strong>（异步阻塞）</strong> </li><li>老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。<strong>（异步非阻塞）</strong>   </li></ol><p>所谓同步异步，只是对于水壶而言。<br>普通水壶，同步；响水壶，异步。<br>虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。 </p><p>所谓阻塞非阻塞，仅仅对于老张而言。<br>立等的老张，阻塞；看电视的老张，非阻塞。<br>情况1和情况3中老张就是阻塞的，电视放什么他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。</p><h2 id="Node-js与异步"><a href="#Node-js与异步" class="headerlink" title="Node.js与异步"></a>Node.js与异步</h2><h3 id="Node为什么要选择异步？"><a href="#Node为什么要选择异步？" class="headerlink" title="Node为什么要选择异步？"></a>Node为什么要选择异步？</h3><h4 id="1、前提条件：JavaScript是单线程的"><a href="#1、前提条件：JavaScript是单线程的" class="headerlink" title="1、前提条件：JavaScript是单线程的"></a>1、前提条件：JavaScript是单线程的</h4><p>JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？<strong>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</strong></p><blockquote><p>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p></blockquote><h4 id="2、从用户体验角度讲，异步I-O可以消除UI阻塞，快速响应资源"><a href="#2、从用户体验角度讲，异步I-O可以消除UI阻塞，快速响应资源" class="headerlink" title="2、从用户体验角度讲，异步I/O可以消除UI阻塞，快速响应资源"></a>2、从用户体验角度讲，异步I/O可以消除UI阻塞，快速响应资源</h4><ul><li>JavaScript是单线程的，它与UI渲染共用一个线程。所以在JavaScript执行的时候，UI渲染将处于停顿的状态，用户体验较差。而异步请求可以在下载资源的时候，JavaScript和UI渲染都同时执行，消除UI阻塞，降低响应资源需要的时间开销。</li><li>假如一个资源来自两个不同位置的数据的返回，第一个资源需要M毫秒的耗时，第二个资源需要N毫秒的耗时。<ul><li>当采用同步的方式，总耗时为（M+N）毫秒。</li><li>当采用异步的方式，总耗时为max（M，N）毫秒。</li></ul></li></ul><h4 id="3、从资源分配角度讲，异步I-O可以让单线程远离阻塞，以更好地利用CPU"><a href="#3、从资源分配角度讲，异步I-O可以让单线程远离阻塞，以更好地利用CPU" class="headerlink" title="3、从资源分配角度讲，异步I/O可以让单线程远离阻塞，以更好地利用CPU"></a>3、从资源分配角度讲，异步I/O可以让单线程远离阻塞，以更好地利用CPU</h4><ul><li>假设业务线上有一组互不相关的任务需要完成，现行的主流方法有以下两种：<ul><li>单线程同步执行：会阻塞I/O导致硬件资源和CPU得不到更优的使用。</li><li>多线程并发执行：会出现死锁、状态同步等问题。</li></ul></li><li>Node的解决方案<ul><li>利用单线程远离多线程的死锁、状态同步等问题。</li><li>利用异步I/O，让单线程远离阻塞，更好的利CPU。</li></ul></li></ul><h3 id="Node如何实现异步I-O？"><a href="#Node如何实现异步I-O？" class="headerlink" title="Node如何实现异步I/O？"></a>Node如何实现异步I/O？</h3><p><strong>事件循环、观察者、请求对象、I/O线程池这四者共同构成了Node异步I/O模型的基本要素。</strong><br><img src="/image/asynchronous/异步流程图.png" alt="异步流程图"><br>整个实现过程大概更可以描述为：  </p><ul><li>发起异步请求之后将请求进行封装，封装为请求对象，对请求对象设置参数和回调函数并将请求对象放入线程池，线程池中检查是否有可用线程，当线程可用时执行请求对象的I/O操作，并将执行完成的结果放入请求对象中，通知IOCP调用完成并获取完成的I/O交给I/O观察者。</li><li>在libuv中创建主循环开始事件循环，主循环从I/O观察者中取出可用的请求对象，在请求对象中取出回调函数和I/O结果并调用回调函数。</li></ul><h4 id="名词解析"><a href="#名词解析" class="headerlink" title="名词解析"></a>名词解析</h4><ul><li><p>观察者：事件循环判断是否有事件待执行，就是通过询问观察者，观察者不会主动通知进程，而是进程询问时才返回结果。 </p><blockquote><p>事件循环是生产者/消费者模型。异步I/O和网络请求是事件的生产者，这些事件被输送到观察者，事件循环是消费者，从观察者这里取出事件处理。观察者就相当于模型中的缓冲区，生产者不断产生事件放到缓冲区，而消费者从缓冲区里取出事件进行消费。</p></blockquote></li><li><p>libuv：libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎。它是Node.js实现异步的核心。</p></li><li><p>请求对象：从JavaScript发起调用到内核执行完I/O操作的过渡过程中，存在一种中间产物，叫做请求对象。从JavaScript传入的参数和当前方法都被封装在这个请求对象中，其中回调函数则被设置在这个对象的oncomplete_sym属性上。<br><img src="/image/asynchronous/请求对象.png" alt="请求对象"><br>假设fs.open()，根据指定路径和参数打开文件。在JS发起调用后，JS调用Node的核心模块（lib/fs.js），核心模块调用C++内建模块(node_file.cc)，內建模块通过libuv判断平台(是*nix还是win)并进行系统调用。在进行系统调用时，从JS层传入的方法和参数都被封装在一个请求对象FSReqWrap中，请求对象被放在线程池中等待执行。JS立即返回继续下面的操作。</p></li><li><p>I/O线程池：在Node中，JS是在单线程中执行的，但是内部完成I/O工作的另有线程池，使用一个主进程和多个I/O线程来模拟异步I/O。当主线程发起I/O调用时，I/O操作会被放在I/O线程来执行，主线程继续执行下面的任务。I/O操作不管是否阻塞，都不会影响JS执行线程的执行。在I/O线程完成操作后会带着数据通知主线程发起回调。<br><img src="/image/asynchronous/多线程.png" alt="多线程"><br><strong>因此，Node.js 的单线程仅仅是指 JavaScript 运行在单线程中，而并非 Node.js 是单线程。</strong></p></li><li><p>事件队列：Node.js 在主线程里维护了一个事件队列，当接到请求后，就将该请求作为一个事件放入这个队列中，然后继续接收其他请求。当主线程空闲时(没有请求接入时)，就开始循环事件队列，检查队列中是否有要处理的事件，这时要分两种情况：如果是非 I/O 任务，就亲自处理，并通过回调函数返回到上层调用；如果是 I/O 任务，就从 线程池 中拿出一个线程来处理这个事件，并指定回调函数，然后继续循环队列中的其他事件。</p></li><li><p>事件循环 (Event Loop)：在进程启动时，Node会创建一个类似于While(true)的循环，每执行一次循环体的过程称为Tick。每个Tick过程中观察者会查看是否有事件需要处理，如果有就取出事件及其相关的回调函数并执行。然后进入下一个Tick。如果没有事件处理，就退出进程。<br><img src="/image/asynchronous/事件循环.png" alt="事件循环"></p></li><li><p>执行回调：I/O执行结束后，会将结果通知IOCP（windows下,linux下epoll），并将线程归还线程池。使用事件循环的I/O观察者，如果有已经执行完的I/O，则将请求对象加入I/O观察者队列中，事件循环再Tick过程中，检测到有I/O观察者，则取出其中的请求对象，再取出请求对象中的回调函数执行。 </p></li></ul><h4 id="代码模拟"><a href="#代码模拟" class="headerlink" title="代码模拟"></a>代码模拟</h4><p>Node.js 实现异步的核心是事件，也就是说，它把每一个任务都当成 事件 来处理，然后通过 Event Loop 模拟了异步的效果，为了更具体、更清晰的理解和接受这个事实，下面我们用伪代码来描述一下其工作原理 。</p><h5 id="【1】定义事件队列"><a href="#【1】定义事件队列" class="headerlink" title="【1】定义事件队列"></a>【1】定义事件队列</h5><p>既然是队列，那就是一个先进先出 (FIFO) 的数据结构，我们用JS数组来描述，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义事件队列</span></span><br><span class="line"><span class="comment"> * 入队：push()</span></span><br><span class="line"><span class="comment"> * 出队：shift()</span></span><br><span class="line"><span class="comment"> * 空队列：length == 0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">globalEventQueue: []</span><br></pre></td></tr></table></figure><p>我们利用数组来模拟队列结构：数组的第一个元素是队列的头部，数组的最后一个元素是队列的尾部，push() 就是在队列尾部插入一个元素，shift() 就是从队列头部弹出一个元素。这样就实现了一个简单的事件队列。</p><h5 id="【2】定义接收请求入口"><a href="#【2】定义接收请求入口" class="headerlink" title="【2】定义接收请求入口"></a>【2】定义接收请求入口</h5><p>每一个请求都会被拦截并进入处理函数，如下所示： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收用户请求</span></span><br><span class="line"><span class="comment"> * 每一个请求都会进入到该函数</span></span><br><span class="line"><span class="comment"> * 传递参数request和response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">processHttpRequest:<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 定义一个事件对象</span></span><br><span class="line">    <span class="keyword">var</span> event = createEvent(&#123;</span><br><span class="line">        params:request.params, <span class="comment">// 传递请求参数</span></span><br><span class="line">        result:<span class="literal">null</span>, <span class="comment">// 存放请求结果</span></span><br><span class="line">        callback:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">// 指定回调函数</span></span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 在队列的尾部添加该事件  </span></span><br><span class="line">    globalEventQueue.push(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数就是把用户的请求包装成事件，放到队列里，然后继续接收其他请求。</p><h5 id="【3】定义-Event-Loop"><a href="#【3】定义-Event-Loop" class="headerlink" title="【3】定义 Event Loop"></a>【3】定义 Event Loop</h5><p>当主线程处于空闲时就开始循环事件队列，所以我们还要定义一个函数来循环事件队列：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件循环主体，主线程择机执行</span></span><br><span class="line"><span class="comment"> * 循环遍历事件队列</span></span><br><span class="line"><span class="comment"> * 处理非I/O任务</span></span><br><span class="line"><span class="comment"> * 处理I/O任务</span></span><br><span class="line"><span class="comment"> * 执行回调，返回给上层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">eventLoop:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 如果队列不为空，就继续循环</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">this</span>.globalEventQueue.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 从队列的头部拿出一个事件</span></span><br><span class="line">        <span class="keyword">var</span> event = <span class="keyword">this</span>.globalEventQueue.shift();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 如果是耗时任务</span></span><br><span class="line">        <span class="keyword">if</span>(isIOTask(event))&#123;</span><br><span class="line">            <span class="comment">// 从线程池里拿出一个线程</span></span><br><span class="line">            <span class="keyword">var</span> thread = getThreadFromThreadPool();</span><br><span class="line">            <span class="comment">// 交给线程处理</span></span><br><span class="line">            thread.handleIOTask(event)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 非耗时任务处理后，直接返回结果</span></span><br><span class="line">            <span class="keyword">var</span> result = handleEvent(event);</span><br><span class="line">            <span class="comment">// 最终通过回调函数返回给V8，再由V8返回给应用程序</span></span><br><span class="line">            event.callback.call(<span class="literal">null</span>,result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主线程不停的检测事件队列，对于 I/O 任务，就交给线程池来处理，非 I/O 任务就自己处理并返回。</p><h5 id="【4】处理-I-O-任务"><a href="#【4】处理-I-O-任务" class="headerlink" title="【4】处理 I/O 任务"></a>【4】处理 I/O 任务</h5><p>线程池接到任务以后，直接处理I/O操作，比如读取数据库：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理I/O任务</span></span><br><span class="line"><span class="comment"> * 完成后将事件添加到队列尾部</span></span><br><span class="line"><span class="comment"> * 释放线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">handleIOTask:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//当前线程</span></span><br><span class="line">    <span class="keyword">var</span> curThread = <span class="keyword">this</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 操作数据库</span></span><br><span class="line">    <span class="keyword">var</span> optDatabase = <span class="function"><span class="keyword">function</span>(<span class="params">params,callback</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = readDataFromDb(params);</span><br><span class="line">        callback.call(<span class="literal">null</span>,result)</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 执行I/O任务</span></span><br><span class="line">    optDatabase(event.params,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 返回结果存入事件对象中</span></span><br><span class="line">        event.result = result;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// I/O完成后，将不再是耗时任务</span></span><br><span class="line">        event.isIOTask = <span class="literal">false</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 将该事件重新添加到队列的尾部</span></span><br><span class="line">        <span class="keyword">this</span>.globalEventQueue.push(event);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 释放当前线程</span></span><br><span class="line">        releaseThread(curThread)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 I/O 任务完成以后就执行回调，把请求结果存入事件中，并将该事件重新放入队列中，等待循环，最后释放当前线程，当主线程再次循环到该事件时，就直接处理了。</p><h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><p>Node.js通过事件驱动模型实现了高并发和异步 I/O，然而也有 Node.js 不擅长做的事情：<br>上面提到，如果是 I/O 任务，Node.js 就把任务交给线程池来异步处理，高效简单，因此 Node.js 适合处理I/O密集型任务。<br>但不是所有的任务都是I/O密集型任务，当碰到CPU密集型任务时，即只用CPU计算的操作，比如要对数据加解密、数据压缩和解压，这时Node.js就会亲自处理，一个一个的计算，前面的任务没有执行完，后面的任务就只能干等着。<br>在事件队列中，如果前面的CPU计算任务没有完成，后面的任务就会被阻塞，出现响应缓慢的情况，如果操作系统本身就是单核，那也就算了，但现在大部分服务器都是多CPU或多核的，而Node.js只有一个Event Loop，也就是只占用一个CPU内核，当Node.js被CPU密集型任务占用，导致其他任务被阻塞时，却还有CPU内核处于闲置状态，造成资源浪费。<br><strong>因此，Node.js 并不适合 CPU 密集型任务。</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Nodejs实际上只是应用程序层面JavaScript单线程执行，真正I/O操作、网络请求、底层API调用都是多线程执行。</li><li>事件循环是Node异步I/O实现的核心，Node通过事件驱动的方式处理请求，使得其无须为每个请求创建额外的线程，省掉了创建和销毁线程的开销。同时也因为线程数较少，不受线程上下文切换的影响，维持了Node的高性能。</li><li>Nodejs具备单线程执行应用程序、异步非阻塞I/O的特点，因此适用于I/O密集型场景，而并不擅长于CPU计算密集型场景。</li></ul><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://segmentfault.com/a/1190000012925872" target="_blank" rel="noopener">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a><br><a href="https://my.oschina.net/zhangjiawen/blog/1551020?from=timeline&amp;isappinstalled=0" target="_blank" rel="noopener">单线程NodeJS的异步I/O</a><br><a href="https://blog.csdn.net/pengpengrose0406/article/details/46964595" target="_blank" rel="noopener">[读书笔记]深入浅出NodeJS——Node中的异步I/O</a><br><a href="https://www.cnblogs.com/onepixel/p/7143769.html" target="_blank" rel="noopener">Node.js 事件循环机制</a><br><a href="https://juejin.im/post/5ab367acf265da23a049783e" target="_blank" rel="noopener">JS/NodeJS中的异步任务与事件环</a><br><a href="https://github.com/zhaoluting/asynchronous/blob/master/深入浅出Node.js.pdf" target="_blank" rel="noopener">深入浅出node.js</a>   </p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面向前端的数据库指南</title>
      <link href="/2018/03/08/database/"/>
      <url>/2018/03/08/database/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库概览"><a href="#数据库概览" class="headerlink" title="数据库概览"></a>数据库概览</h1><p>一般一个数据库系统（Database System）可分为数据库（Database）与数据管理系统（Database Management System，DBMS）两个部分。数据库就是按照数据结构来组织、存储和管理数据的仓库，管理这个数据库的软件就称之为数据库管理系统。<a href="https://www.zhihu.com/question/21091495/answer/17197897" target="_blank" rel="noopener">也可以更形象地类比成中药铺子。</a></p><a id="more"></a><h2 id="关系型与非关系型"><a href="#关系型与非关系型" class="headerlink" title="关系型与非关系型"></a>关系型与非关系型</h2><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><ol><li>以行和列的形式存储数据，结构稳定，具有逻辑性，易于理解，但不易修改。</li><li>查询能力强，可以操作很复杂的查询。</li><li>一致性高。由于并发高，在数据同步的时候一般采用锁来保证数据的可靠性。</li><li>事务支持使得对于安全性能很高的数据访问要求得以实现。</li></ol><h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><ol><li>非关系型数据库主要使用key-value的方式存储数据，即是“no relational”，由于数据间没有关联性，相对来说层级扁平。而且不需要经过SQL层的解析，所以性能非常高。</li><li>可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</li><li>数据结构灵活，每个数据都可以有不同的结构。</li><li>由于降低了一致性的要求，所以查询速度更快。</li><li>不适用于复杂SQL操作。</li><li>不支持事务。</li></ol><h3 id="关系型数据库-V-S-非关系型数据库"><a href="#关系型数据库-V-S-非关系型数据库" class="headerlink" title="关系型数据库  V.S.  非关系型数据库"></a>关系型数据库  V.S.  非关系型数据库</h3><p>关系型数据库的最大特点就是事务的一致性：传统的关系型数据库读写操作都是事务的，具有ACID的特点，这个特性使得关系型数据库可以用于几乎所有对一致性有要求的系统中，如典型的银行系统。相反地，关系型数据库为了维护一致性所付出的巨大代价就是其读写性能比较差，而像微博、facebook这类SNS的应用，对并发读写能力要求极高；另外，其固定的表结构，因此，其扩展性极差。</p><p>于是，非关系型数据库应运而生，由于不可能用一种数据结构化存储应付所有的新的需求，因此，非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合。必须强调的是，数据的持久存储，尤其是海量数据的持久存储，还是需要一种关系数据库这员老将。</p><h2 id="主流数据库"><a href="#主流数据库" class="headerlink" title="主流数据库"></a>主流数据库</h2><p><a href="https://db-engines.com/en/ranking" target="_blank" rel="noopener">数据库排行榜</a>中商业Oracle、微软SQLServer、免费MySQL，三者是目前市场占有率最高（依安装量而非收入）的关系数据库，而且很有代表性。</p><h3 id="三大关系型数据库"><a href="#三大关系型数据库" class="headerlink" title="三大关系型数据库"></a>三大关系型数据库</h3><ol><li>Oracle<br>Oracle主要应用在传统行业的数据化业务中，比如：银行、金融这样的对可用性、健壮性、安全性、实时性要求极高的业务；零售、物流这样对海量数据存储分析要求很高的业务。而且由于Oracle对复杂计算、统计分析的强大支持，在互联网数据分析、数据挖掘方面的应用也越来越多。</li><li>MySQL<br>MySQL基本是生于互联网，长于互联网。其应用实例也大都集中于互联网方向，MySQL的高并发存取能力并不比大型数据库差，同时价格便宜，安装使用简便快捷，深受广大互联网公司的喜爱。最大的一个特色，就是自由选择存储引擎。每个表都是一个文件，都可以选择合适的存储引擎。常见的引擎有 InnoDB、 MyISAM、 NDBCluster等。并且由于MySQL的开源特性，针对一些对数据库有特别要求的应用，可以通过修改代码来实现定向优化，例如SNS、LBS等互联网业务。</li><li>MS SQLServer<br>windows生态系统的产品，好处坏处都很分明。好处就是，高度集成化，微软也提供了整套的软件方案，基本上一套win系统装下来就齐活了。因此，不那么缺钱，但很缺IT人才的中小企业，会偏爱 MS SQL Server。例如，自建ERP系统、商业智能、垂直领域零售商、餐饮、事业单位等等。</li></ol><h3 id="两大非关系型数据库"><a href="#两大非关系型数据库" class="headerlink" title="两大非关系型数据库"></a>两大非关系型数据库</h3><p>NoSQL主要有以下几类：临时性键值存储（memcached、Redis）、永久性键值存储（ROMA、Redis）、面向文档的数据库（MongoDB、CouchDB）、面向列的数据库（Cassandra、HBase）。最热门的是MongoDB 和 Redis。下面从以下几个维度对redis、mongoDB进行对比：</p><ol><li><p>性能<br>性能都比较高，总体来讲，TPS方面redis优于mongodb；</p></li><li><p>可操作性<br>redis数据丰富，较少的网络IO次数；<br>mongodb支持丰富的数据表达、索引，类似关系型数据库MySQL，支持的查询语言非常丰富。<br>总体来讲，MongoDB优于Redis。</p></li><li><p>内存空间的大小和数据量的大小<br>redis在2.0版本后增加了自己的VM特性，突破物理内存的限制，可以对key value设置过期时间（类似memcache）；<br>mongoDB适合大数据量存储，依赖系统虚拟内存管理，采用镜像文件存储；内存占有率比较高，官方建议独立部署在64位系统。<br>不同的应用角度看，各有优势。</p></li><li><p>可用性<br>redis依赖客户端来实现分布式读写，主从复制时，每次从节点重新连接主节点都要依赖整个快照,无增量复制；不支持自动sharding,需要依赖程序设定一致hash机制。<br>mongoDB支持master-slave,replicaset（内部采用paxos选举算法，自动故障恢复）,auto sharding机制，对客户端屏蔽了故障转移和切分机制。<br>总体来讲，MongoDB优于Redis；单点问题上，MongoDB应用简单，相对用户透明，Redis比较复杂，需要客户端主动解决。</p></li><li><p>可靠性(持久化)<br>redis依赖快照进行持久化，aof增强了可靠性的同时，对性能有所影响;<br>MongoDB从1.8版本开始采用binlog方式（MySQL同样采用该方式）支持持久化的可靠性。<br>对于数据持久化和数据恢复，MongoDB优于Redis</p></li></ol><ol start="6"><li><p>数据一致性（事务支持）<br>redis事务支持比较弱，只能保证事务中的每个操作连续执行;<br>mongoDB不支持事务。<br>此方面，Redis优于MongoDB。</p></li><li><p>数据分析<br>mongoDB内置了数据分析的功能，Redis不支持</p></li><li><p>应用场景<br>redis：数据量较小的更性能操作和运算上;<br>MongoDB:主要解决海量数据的访问效率问题。</p></li></ol><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>组内推荐使用MySQL，所以接下来介绍下MySQL。</p><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><h3 id="主键-primary-key"><a href="#主键-primary-key" class="headerlink" title="主键(primary key)"></a>主键(primary key)</h3><p>能够唯一标识表中某一行的属性或属性组。一个表只能有一个主键，但可以有多个候选索引。主键常常与外键构成参照完整性约束，防止出现数据不一致。主键可以保证记录的唯一和主键域非空,数据库管理系统对于主键自动生成唯一索引，所以主键也是一个特殊的索引。</p><h3 id="外键（foreign-key）"><a href="#外键（foreign-key）" class="headerlink" title="外键（foreign key）"></a>外键（foreign key）</h3><p>是用于建立和加强两个表数据之间的链接的一列或多列。外键约束主要用来维护两个表之间数据的一致性。简言之，表的外键就是另一表的主键，外键将两表联系起来。一般情况下，要删除一张表中的主键必须首先要确保其它表中的没有相同外键（即该表中的主键没有一个外键和它相关联）。</p><h3 id="约束（constraints）"><a href="#约束（constraints）" class="headerlink" title="约束（constraints）"></a>约束（constraints）</h3><p>SQL 约束用于规定表中的数据规则。如果存在违反约束的数据行为，行为会被约束终止。约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。<br>常用SQL约束：</p><ul><li>NOT NULL - 非空约束，指定某列不为空。</li><li>UNIQUE - 保证某列的每行必须有唯一的值。</li><li>PRIMARY KEY - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</li><li>FOREIGN KEY - 保证一个表中的数据匹配另一个表中的值的参照完整性。</li><li>CHECK - 保证列中的值符合指定的条件。</li><li>DEFAULT - 规定没有给列赋值时的默认值。</li></ul><h3 id="索引-index"><a href="#索引-index" class="headerlink" title="索引(index)"></a>索引(index)</h3><p>是用来快速地寻找那些具有特定值的记录。主要是为了检索的方便，是为了加快访问速度， 按一定的规则创建的，一般起到排序作用。所谓唯一性索引，这种索引和前面的“普通索引”基本相同，但有一个区别：索引列的所有值都只能出现一次，即必须唯一。</p><h3 id="存储过程-proceduer"><a href="#存储过程-proceduer" class="headerlink" title="存储过程(proceduer)"></a>存储过程(proceduer)</h3><p>存储过程是保存在数据库上的一段可执行代码。与java中的函数类似。通过一系列的SQL语句，根据传入的参数（也可以没有），通过简单的调用，完成比单个SQL语句更复杂的功能，存储在数据库服务器端，只需要编译过一次之后再次使用都不需要再进行编译。主要对存储的过程进行控制。</p><h3 id="触发器-trigger"><a href="#触发器-trigger" class="headerlink" title="触发器(trigger)"></a>触发器(trigger)</h3><p>触发器是一个特殊的存储过程，不同的是存储过程要用CALL来调用，而触发器不需要使用CALL也不需要手工启动，只要当一个预定义的事件发生的时候，就会被MYSQL自动调用。触发器可以让你在执行INSERT,UPDATE或者DELETE的时候，执行一些特定的操作，可以在MYSQL中指定实在SQL语句执行前触发还是执行后触发。</p><h3 id="事务-transaction"><a href="#事务-transaction" class="headerlink" title="事务(transaction)"></a>事务(transaction)</h3><p>特点：</p><ul><li>原子性(atomicity)：组成事务处理的语句形成了一个逻辑单元，不能只执行其中的一部分。</li><li>一致性(consistency)：在事务处理执行前后，数据库是一致的(数据库数据完整性约束)。</li><li>隔离性(isolcation)：一个事务处理对另一个事务处理的影响。</li><li>持续性(durability)：事务处理的效果能够被永久保存下来 。</li></ul><p>过程：</p><ul><li>Start transaction：开始一个事务。  </li><li>Commit：提交所做的修改。  </li><li>Rollback：回滚所做的修改。如果在操作时出错，应该从新开始一个事务。</li></ul><p>总结：事务从Start transaction到Commit或者Rollback结束，这中间的语句是一个整体，如果执行Rollback，那么这些动作都会回滚。如果执行Commit那么这些动作全部执行成功。</p><h3 id="锁-lock"><a href="#锁-lock" class="headerlink" title="锁(lock)"></a>锁(lock)</h3><p>InnoDB主要实现了两种类型的行锁：共享锁和排它锁。InnoDB行锁是通过给索引项加锁实现的，如果没有索引，InnoDB会通过隐藏的聚簇索引来对记录加锁。对于insert、update、delete，InnoDB会自动给涉及的数据加排他锁（X）；对于一般的Select语句，InnoDB不会加任何锁。 </p><ul><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同的数据集的排他锁（我读的时候，你可以读，但是不能写）。</li><li>排他锁（X）：允许获得排他锁的事务更新数据，但是组织其他事务获得相同数据集的共享锁和排他锁（我写的时候，你不能读也不能写）。</li></ul><p><strong>何时在InnoDB中使用表锁：</strong><br>InnoDB在绝大部分情况会使用行级锁，因为事务和行锁往往是我们选择InnoDB的原因，但是在如下情况我们也考虑使用表级锁：</p><ul><li>当事务需要更新大部分数据时，表又比较大，如果使用默认的行锁，不仅效率低，而且还容易造成其他事务长时间等待和锁冲突。</li><li>事务比较复杂，很可能引起死锁导致回滚。</li></ul><p><strong>避免死锁</strong><br>在InnoDB中，锁是逐步获得的，就造成了死锁的可能。当两个事务都需要获得对方持有的锁才能够继续完成事务，导致双方都在等待，就会产生死锁。有多种方法可以避免死锁，这里只介绍常见的三种：</p><ul><li>如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以大大降低死锁机会；</li><li>在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率；</li><li>对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁产生的概率；</li></ul><h3 id="MySQL三大范式和反范式"><a href="#MySQL三大范式和反范式" class="headerlink" title="MySQL三大范式和反范式"></a>MySQL三大范式和反范式</h3><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。但是有些时候一昧的追求范式减少冗余，反而会降低数据读写的效率，这个时候就要反范式，利用空间来换时间。</p><ul><li>第一范式：确保每列的原子性。</li><li>第二范式：确保表中的每列都和主键相关。</li><li>第三范式：确保每列都和主键列直接相关,而不是间接相关。</li><li>反三范式：没有冗余的数据库未必是最好的数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是： 在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，减少了查询时的关联，提高查询效率，因为在数据库的操作中查询的比例要远远大于DML的比例。但是反范式化一定要适度，并且在原本已满足三范式的基础上再做调整的。</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>首先安装MySQL，可参照此教程=&gt;<a href="http://blog.csdn.net/catstarxcode/article/details/78940385" target="_blank" rel="noopener">Mac安装MySQL</a>。（注：一定要记住临时密码并重置）；</li><li>安装可视化工具：sequel pro或者Navicat都可以（我用<a href="https://sequelpro.com/" target="_blank" rel="noopener">sequel pro</a>举例）；</li><li><p>然后打开 sequel pro就可以在里面进行与数据库的连接，连接时输入的信息有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host –在本机上面就输入本机的IP地址（127.0.0.1），   </span><br><span class="line">username – 默认是 root   </span><br><span class="line">password – 就是数据库的密码   </span><br><span class="line">database – 可以不填   </span><br><span class="line">port – 端口号 默认是 3306</span><br></pre></td></tr></table></figure></li><li><p>连接后就可以进行各种操作啦（附上简单<a href="https://segmentfault.com/a/1190000006255923" target="_blank" rel="noopener">教程</a>）</p></li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>基本会增删改查即可（<a href="http://www.runoob.com/sql/sql-tutorial.html" target="_blank" rel="noopener">SQL语法学习地址</a>）</p><ul><li>SELECT - 从数据库中提取数据</li><li>UPDATE - 更新数据库中的数据</li><li>DELETE - 从数据库中删除数据</li><li>INSERT INTO - 向数据库中插入新数据</li><li>CREATE DATABASE - 创建新数据库</li><li>ALTER DATABASE - 修改数据库</li><li>CREATE TABLE - 创建新表</li><li>ALTER TABLE - 变更（改变）数据库表</li><li>DROP TABLE - 删除表</li><li>CREATE INDEX - 创建索引（搜索键）</li><li>DROP INDEX - 删除索引</li></ul><h2 id="争议点"><a href="#争议点" class="headerlink" title="争议点"></a>争议点</h2><h3 id="该不该摒弃外键"><a href="#该不该摒弃外键" class="headerlink" title="该不该摒弃外键"></a>该不该摒弃外键</h3><h4 id="矛盾焦点"><a href="#矛盾焦点" class="headerlink" title="矛盾焦点"></a>矛盾焦点</h4><p>数据库设计是否需要外键。这里有两个问题：一个是如何保证数据库数据的完整性和一致性；二是第一条对性能的影响。</p><h4 id="正方观点"><a href="#正方观点" class="headerlink" title="正方观点"></a>正方观点</h4><ol><li>由数据库自身保证数据一致性，完整性，更可靠，因为程序很难100％保证数据的完整性，而用外键即使在数据库服务器当机或者出现其他问题的时候，也能够最大限度的保证数据的一致性和完整性。</li><li>有主外键的数据库设计可以增加ER图的可读性，这点在数据库设计时非常重要。</li><li>外键在一定程度上说明的业务逻辑，会使设计周到具体全面。</li></ol><h4 id="反方观点"><a href="#反方观点" class="headerlink" title="反方观点"></a>反方观点</h4><ol><li>数据库需要维护外键的内部管理；</li><li>外键等于把数据的一致性事务实现，全部交给数据库服务器完成，可控性就会降低。你自己写代码控制的话，相当于许多数据逻辑自己控制，虽然麻烦，但是出了问题有利于自己查找并针对性解决。</li><li>有了外键，当做一些涉及外键字段的增，删，更新操作之后，需要触发相关操作去检查，进行完整性检查是一个耗费时间和资源的过程。在并发小的情况下，这种开销应该没什么区别，但是在高并发的情况下，数据库的外键对性能的影响肯定是很高的；</li><li>外键还会因为需要请求对其他表内部加锁而容易出现死锁情况；</li><li>可以用事务或应用程序保证数据的完整性。</li></ol><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>外键是否采用看业务应用场景，以及开发成本的，大致列下什么时候适合，什么时候不适合使用：</p><ol><li>互联网行业应用不推荐使用外键：<br>用户量大，并发度高，为此数据库服务器很容易成为性能瓶颈，尤其受IO能力限制，且不能轻易地水平扩展；若是把数据一致性的控制放到事务中，也即让应用服务器承担此部分的压力，而引用服务器一般都是可以做到轻松地水平的伸缩；</li><li><p>传统行业建议使用外键：<br>软件应用的人数有限，换句话说是可控的；数据库服务器的数据量也一般不会超大，且活跃数据有限。综合上述2句话描述，也即数据库服务器的性能不是问题，所以不用过多考虑性能的问题；另外，使用外键可以降低开发成本，借助数据库产品自身的触发器可以实现表与关联表之间的数据一致性和更新；最后一点，使用外键的方式，还可以做到开发人员和数据库设计人员的分工，可以为程序员承担更多的工作量；</p></li><li><p>需要注意的是：MySQL允许使用外键，但是为了完整性检验的目的，在除了InnoDB表类型之外的所有表类型中都忽略了这个功能。如果需要更好的性能，并且不需要完整性检查，可以选择使用MyISAM表类型，如果想要在MySQL中根据参照完整性来建立表并且希望在此基础上保持良好的性能，最好选择表结构为innoDB类型。</p></li></ol><h2 id="学习重点"><a href="#学习重点" class="headerlink" title="学习重点"></a>学习重点</h2><ul><li>熟练运用增删改查命令</li><li>用事务来代替外键来保证完整性</li><li>用索引提高查询速度</li><li>熟练运用锁来优化数据库</li></ul><h2 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h2><p>《MySQL必知必会》（适合入门）<br>《高性能MySQL》<br>《MySQL技术内幕-innorDB搜索引擎》</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac terminal入门篇</title>
      <link href="/2018/01/25/Mac-terminal/"/>
      <url>/2018/01/25/Mac-terminal/</url>
      
        <content type="html"><![CDATA[<h2 id="了解mac-terminal（终端）"><a href="#了解mac-terminal（终端）" class="headerlink" title="了解mac terminal（终端）"></a>了解mac terminal（终端）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">system_profiler    <span class="comment">#显示Mac的硬件和软件信息</span></span><br><span class="line">sw_vers            <span class="comment">#显示OSX系统版本</span></span><br><span class="line">uname -av          <span class="comment">#显示OS X Darwin内核版本</span></span><br></pre></td></tr></table></figure><p>简单来说：  </p><ul><li>unix是最早的出来的多任务、多用户系统，是对源代码实行知识产权保护的传统商业软件，是收费的。 </li><li>linux是一个牛人为了让人们用到免费的类unix系统，开发出了linux的内核，是开放源代码的自由软件。</li><li>mac os x是由Unix的一个分支(BSD)发展过来的，核心叫darwin(达尔文)。</li></ul><p>在unix 内核的操作系统中,包括衍生出来的分支linux、OS X等，所有文件都挂在跟目录 / 下面，没有Windows下的盘符概念。</p><a id="more"></a><table><thead><tr><th>位置</th><th>路径</th><th>备注</th></tr></thead><tbody><tr><td>根目录</td><td>/mach_kernel</td><td>内核就在这</td></tr><tr><td>驱动所在</td><td>/Systme/Library/Extensions</td><td></td></tr><tr><td>用户文件夹(home folder)</td><td>/User/用户名</td><td>简写：~</td></tr><tr><td>桌面</td><td>/User/用户名/Desktop</td><td></td></tr><tr><td>当前目录</td><td>.</td><td></td></tr><tr><td>父目录</td><td>..</td><td></td></tr></tbody></table><blockquote><p>注意：在 Unix系统中是区别大小写字符的，并且对于文件名，必须包括扩展名。</p></blockquote><h2 id="快速打开终端"><a href="#快速打开终端" class="headerlink" title="快速打开终端"></a>快速打开终端</h2><ol><li>spotlight方法：首先用快捷键打开spotlight（command+空格），输入ter，自动显示出终端全称，按enter即可打开终端。  </li><li>Finder打开：Finder——应用程序——实用工具——终端  </li><li>快捷键完成当前文件夹打开终端：打开“系统偏好设置”——键盘——快捷键——服务，找到“新建位于文件夹位置的终端窗口”打钩。之后，只要在文件夹上 右键——服务——“新建位于文件夹位置的终端窗口” 即可。</li></ol><h2 id="终级Shell–zsh"><a href="#终级Shell–zsh" class="headerlink" title="终级Shell–zsh"></a>终级Shell–zsh</h2><p>shell 是我们和系统内核指令打交道的一座桥梁,我们通过键盘输入一种自己容易记忆识别的符号标识(shell 命令)，然后 shell 解析这种命令再反馈给内核去执行一系列操作。</p><p><strong>可以通过以下命令查看安装了哪些shell（OS X 系统预装了zsh）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><p><strong>查看系统默认的shell</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure></p><p><strong>将默认shell改成zsh</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></p><blockquote><p>zsh是shell的一种，由于配置过于复杂，以至于很多人并不常用他。所以大多数Linux产品默认使用的都是bash shell。直到一个开源项目的出现<a href="http://ohmyz.sh" target="_blank" rel="noopener">oh my zsh</a>，github来管理zsh的配置和支持更多插件，使得zsh配置变得更容易，使用起来更加强大。以至于他有了个外号—<strong>终极shell</strong>。</p></blockquote><p><strong>安装oh my zsh</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure></p><p><strong>配置文件路径：</strong> ~/.zshrc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">大部分配置都可以在配置文件中进行设置，这里大概翻译一下。</span><br><span class="line"></span><br><span class="line"><span class="comment"># ZSH的环境变量</span></span><br><span class="line"><span class="built_in">export</span> ZSH=/Users/dawang/.oh-my-zsh</span><br><span class="line"><span class="comment"># 主题设置</span></span><br><span class="line"><span class="comment"># 主题列表在 ~/.oh-my-zsh/themes/</span></span><br><span class="line"><span class="comment"># [主题列表](https://github.com/robbyrussell/oh-my-zsh/wiki/themes)</span></span><br><span class="line"><span class="comment"># 如果设置为 "random", 每次开启都会是不同的主题</span></span><br><span class="line">ZSH_THEME=<span class="string">"robbyrussell"</span></span><br><span class="line"><span class="comment"># 如果想要大小写敏感，可以取消注释下面的一行</span></span><br><span class="line"><span class="comment"># CASE_SENSITIVE="true"</span></span><br><span class="line"><span class="comment"># 如果想要连接符不敏感，可以取消注释下面的一行。_ 和 - 将可以互换</span></span><br><span class="line"><span class="comment"># HYPHEN_INSENSITIVE="true"</span></span><br><span class="line"><span class="comment"># 如果不想要自动更新，可以取消注释下面的一行</span></span><br><span class="line"><span class="comment"># DISABLE_AUTO_UPDATE="true"</span></span><br><span class="line"><span class="comment"># 自动更新的时间间隔，单位是天，这里设置 30 天更新一次</span></span><br><span class="line"><span class="built_in">export</span> UPDATE_ZSH_DAYS=30</span><br><span class="line"><span class="comment"># 如果不想要 ls 命令输出带颜色，可以取消注释下面的一行</span></span><br><span class="line"><span class="comment"># DISABLE_LS_COLORS="true"</span></span><br><span class="line"><span class="comment"># 是否禁止更改终端标题,不要禁止,不然所有终端tab只显示zsh了,而不随着目录的改变而改变显示</span></span><br><span class="line"><span class="comment"># DISABLE_AUTO_TITLE="true"</span></span><br><span class="line"><span class="comment"># 自动纠正命令,不启用,不怎么好用</span></span><br><span class="line"><span class="comment"># ENABLE_CORRECTION="true"</span></span><br><span class="line"><span class="comment"># 按tab键补全命令的时候,如果没什么可补全的就会出现三个红点</span></span><br><span class="line"><span class="comment"># COMPLETION_WAITING_DOTS="true"</span></span><br><span class="line"><span class="comment"># Uncomment the following line if you want to disable marking untracked files</span></span><br><span class="line"><span class="comment"># under VCS as dirty. This makes repository status check for large repositories</span></span><br><span class="line"><span class="comment"># much, much faster.</span></span><br><span class="line"><span class="comment"># 不要在意这些细节，不需要改动</span></span><br><span class="line"><span class="comment"># DISABLE_UNTRACKED_FILES_DIRTY="true"</span></span><br><span class="line"><span class="comment"># 历史命令日期显示格式</span></span><br><span class="line"><span class="comment"># 有三种方式: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"</span></span><br><span class="line"><span class="comment"># HIST_STAMPS="yyyy-mm-dd"</span></span><br><span class="line"><span class="comment"># Would you like to use another custom folder than $ZSH/custom?</span></span><br><span class="line"><span class="comment"># ZSH_CUSTOM=/path/to/new-custom-folder</span></span><br><span class="line"><span class="comment"># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)</span></span><br><span class="line"><span class="comment"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span></span><br><span class="line"><span class="comment"># Example format: plugins=(rails git textmate ruby lighthouse)</span></span><br><span class="line"><span class="comment"># 插件设置，如果添加太多启动速度会比较慢</span></span><br><span class="line">plugins=(git autojump)</span><br><span class="line">[[ -s ~/.autojump/etc/profile.d/autojump.zsh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.zsh</span><br><span class="line"><span class="comment"># 剩下部分比较不常改动 </span></span><br><span class="line"><span class="comment"># User configuration</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/TeX/texbin"</span></span><br><span class="line"><span class="comment"># export MANPATH="/usr/local/man:$MANPATH"</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br><span class="line"><span class="comment"># You may need to manually set your language environment</span></span><br><span class="line"><span class="comment"># export LANG=en_US.UTF-8</span></span><br><span class="line"><span class="comment"># Preferred editor for local and remote sessions</span></span><br><span class="line"><span class="comment"># if [[ -n $SSH_CONNECTION ]]; then</span></span><br><span class="line"><span class="comment">#   export EDITOR='vim'</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#   export EDITOR='mvim'</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"><span class="comment"># Compilation flags</span></span><br><span class="line"><span class="comment"># export ARCHFLAGS="-arch x86_64"</span></span><br><span class="line"><span class="comment"># ssh</span></span><br><span class="line"><span class="comment"># export SSH_KEY_PATH="~/.ssh/dsa_id"</span></span><br><span class="line"><span class="comment"># Set personal aliases, overriding those provided by oh-my-zsh libs,</span></span><br><span class="line"><span class="comment"># plugins, and themes. Aliases can be placed here, though oh-my-zsh</span></span><br><span class="line"><span class="comment"># users are encouraged to define aliases within the ZSH_CUSTOM folder.</span></span><br><span class="line"><span class="comment"># For a full list of active aliases, run `alias`.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example aliases</span></span><br><span class="line"><span class="comment"># alias zshconfig="mate ~/.zshrc"</span></span><br><span class="line"><span class="comment"># alias ohmyzsh="mate ~/.oh-my-zsh"</span></span><br></pre></td></tr></table></figure><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><ol><li>插件相关的文件在~/.oh-my-zsh/plugins目录下，默认提供了100多种。插件也是在.zshrc里配置，找到plugins关键字，系统默认加载git与autojump，可以在后面追加启用插件。</li></ol><ul><li><p>git：当你处于一个 git 受控的目录下时，Shell 会明确显示 「git」和 branch。另外对git 很多命令进行了简化，例如 gco=’git checkout’、gst=’git status’、g=’git’等等，熟练使用可以大大减少 git 的命令长度，命令内容可以参考~/.oh-my-zsh/plugins/git/git.plugin.zsh</p></li><li><p>安装了autojump之后，zsh 会自动记录你访问过的目录，通过 j + 目录名 可以直接进行目录跳转，而且目录名支持模糊匹配和自动补全。</p></li></ul><ol start="2"><li><p>配置文件底部可以设置 alias（通用别名），还能针对文件类型设置对应的打开程序。</p></li><li><p>连按两次Tab会列出所有的补全列表并直接开始选择，补全项可以使用 ctrl+n/p/f/b 或 方向键上下左右切换。</p></li><li><p>在zsh中只需要键入 ls -<tab> 就会列出所有的选项和帮助说明。  </tab></p></li><li><p>命令参数补全。键入 kill <tab> 就会列出所有的进程名和对应的进程号。</tab></p></li><li><p>更智能的历史命令。在用或者方向上键查找历史命令时，zsh支持限制查找。比如，输入ls,然后再按方向上键，则只会查找用过的ls命令。</p></li><li><p>多个终端会话共享历史记录。</p></li><li><p>目录浏览和跳转：输入 d，即可列出你在这个会话里访问的目录列表，输入列表前的序号，即可直接跳转。</p></li><li><p>在当前目录下输入 .. 或 … ，或直接输入当前目录名都可以跳转，你甚至不再需要输入 cd 命令了。在你知道路径的情况下，比如 /usr/local/bin 你可以输入 cd /u/l/b 然后按进行补全快速输入。</p></li><li><p>通配符搜索：例如“ls -l **/*.sh”，可以递归显示当前目录下的 shell 文件，文件少时可以代替 find。使用 **/ 来递归搜索。</p></li><li><p>如何在命令里面打回车： \ 后面接回车</p></li><li><p>一句话执行两个命令： xxx; yyy</p></li><li><p>一句话执行两个命令： xxx&amp;&amp; yyy</p></li></ol><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>光标左移：Ctrl + B</li><li>光标右移：Ctrl + F</li><li>光标至行首：Ctrl + A</li><li>光标至行尾：Ctrl + E</li><li>删除至行首：Ctrl + U</li><li>删除至行尾：Ctrl + K</li><li>删除至单词开始：Ctrl + W</li><li>清屏：Ctrl + L</li><li>插入最近删除：Ctrl + Y</li><li>历史命令：↑ 或 ↓箭头，或 ⌃ + P、Ctrl + N</li><li>搜索历史命令：Ctrl + R</li><li>中止执行：Ctrl + C</li><li>按住 ⌘，单击路径可以在 Finder 中打开</li></ul><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><table><thead><tr><th>命令</th><th>全写</th><th>缩写   </th></tr></thead><tbody><tr><td>创建目录</td><td>make directory</td><td>mkdir </td></tr><tr><td>删除</td><td>remove</td><td>rm</td></tr><tr><td>移动/重命名</td><td>move</td><td>mv</td></tr><tr><td>复制</td><td>copy</td><td>cp</td></tr><tr><td>罗列</td><td>list</td><td>ls</td></tr><tr><td>链接</td><td>link</td><td>ln *</td></tr></tbody></table><h3 id="常用的通配符"><a href="#常用的通配符" class="headerlink" title="常用的通配符"></a>常用的通配符</h3><ul><li>星号（＊，Asterisk）——代表任何长度的任何字符。例如*.tiff代表所有格式为tiff的文件。</li><li>问号（?，Question mark）——代表任何单个字符。例如b?ok匹配 book 但是不匹配 brook。</li><li>方括号（[]，Square brackets）——定义一定范围的字符，例如[Dd]ocument匹配 Document 以及 document；doc[1-9]匹配doc1, doc2, …, doc9。  </li></ul><h3 id="处理特殊字符"><a href="#处理特殊字符" class="headerlink" title="处理特殊字符"></a>处理特殊字符</h3><ul><li><p>如果目录中有特殊字符（空格，括号，引号，[]，!，$，&amp;，*，;，|，\），那么直接输入空格会造成系统识别困难，必须使用特殊的语法来表示这些字符。例如上例中，空格前添加反斜杠“\”（back slash）即可：cd Punlic/Drop\ Box/。除了反斜杠，也可以用引号的方法：cd “Public/Drop Box”。</p></li><li><p>如果不想手动输入，也可以把文件从 Finder 拖到 Terminal 窗口来创建绝对路径，这会方便一些，因为上面提到的所有特殊字符在拖动后都会自动变成系统可识别的表示方法。</p></li><li><p>更有效率的解决方案是使用 Tab Complete 功能。连按两次Tab进行选择。Tab complete 同样会处理那些特殊字符。</p></li></ul><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="列出文件"><a href="#列出文件" class="headerlink" title="列出文件"></a>列出文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls 参数 目录名</span><br></pre></td></tr></table></figure><p>以下为常用参数，可组合使用。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>显示所有档案及目录（ls内定将档案名或目录名称为“.”的视为影藏，不会列出）。 </td></tr><tr><td>-A</td><td>显示除影藏文件“.”和“..”以外的所有文件列表。 </td></tr><tr><td>-d</td><td>仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表。 </td></tr><tr><td>-l</td><td>以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等。 </td></tr><tr><td>-R</td><td>递归处理，将指定目录下的所有文件及子目录一并处理； –full-time：列出完整的日期与时间； –color[=WHEN]：使用不同的颜色高亮显示不同类型的。 </td></tr></tbody></table><h3 id="转换目录"><a href="#转换目录" class="headerlink" title="转换目录"></a>转换目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span>     <span class="comment">#含义是“print working directory”，会显示当前目录的绝对路径。</span></span><br><span class="line"><span class="built_in">cd</span> 路径  <span class="comment">#改变当前目录到你指定的目录。不指定则会返回 home folder</span></span><br></pre></td></tr></table></figure><h3 id="打开文件目录或程序"><a href="#打开文件目录或程序" class="headerlink" title="打开文件目录或程序"></a>打开文件目录或程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">open /Applications/Safari.app/  <span class="comment">#打开应用</span></span><br><span class="line">open .  <span class="comment">#打开当前目录。</span></span><br></pre></td></tr></table></figure><h3 id="建立新目录"><a href="#建立新目录" class="headerlink" title="建立新目录"></a>建立新目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir 目录名</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-p</td><td>递归创建目录，如果文件不存在，则逐层创建目录。</td></tr><tr><td>-v</td><td>显示目录创建的信息。</td></tr></tbody></table><h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch 文件名   <span class="comment">#主要功能与时间戳有关，用来更新文件的访问和修改时间。如果文件不存在，会创建相应的空文件</span></span><br></pre></td></tr></table></figure><h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp 参数 源文件 目标文件</span><br><span class="line"></span><br><span class="line">cp file /usr/men/tmp/file1  <span class="comment">#将文件file复制到目录/usr/men/tmp下，并改名为file1</span></span><br><span class="line"></span><br><span class="line">cp -r /usr/men /usr/zh      <span class="comment">#将目录/usr/men下的所有文件及其子目录复制到目录/usr/zh中</span></span><br><span class="line"></span><br><span class="line">cp -i /usr/men m*.c /usr/zh <span class="comment">#交互式地将目录/usr/men中的以m打头的所有.c文件复制到目录/usr/zh中（覆盖之前询问用户）</span></span><br></pre></td></tr></table></figure><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm  foo.txt        <span class="comment">#删除一般文件  </span></span><br><span class="line">rm  -r  foofolder  <span class="comment">#删除目录</span></span><br><span class="line">rm  -r  *          <span class="comment">#删除当前目录下的所有文件及目录</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-r</td><td>删除目录时必需参数；  </td></tr><tr><td>-i</td><td>删除前逐一询问确认；  </td></tr><tr><td>－rf</td><td>表示递归和强制，千万要小心使用，如果执行了 rm -rf / 就全没了</td></tr></tbody></table><h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv file1 file2      <span class="comment">#（若目标是文件名，则相当于文件改名）将文件 file1 改名为 file2。</span></span><br><span class="line">mv file1 file2 /tmp <span class="comment">#将文件 file1 和文件 file2 移动到目录 /tmp 下</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>- i</td><td>在覆盖已存在文件时作提示，若回答 y 则覆盖，其他则中止</td></tr><tr><td>- f</td><td>覆盖前不作任何提示</td></tr></tbody></table><h3 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h3><table><thead><tr><th>编辑器</th><th>特点</th></tr></thead><tbody><tr><td>vi</td><td>老式的简单文本编辑器</td></tr><tr><td>vim</td><td>复杂的文本编辑器，相当于vi的升级版</td></tr><tr><td>nano</td><td>小巧自由的舒适型编辑器</td></tr></tbody></table><h4 id="nano"><a href="#nano" class="headerlink" title="nano"></a><a href="http://man.linuxde.net/nano" target="_blank" rel="noopener">nano</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano 路径+文件名 <span class="comment">#若文件存在将打开这个文件；不存在则会创建新文件并打开。</span></span><br></pre></td></tr></table></figure><ul><li>复制一整行：Alt+6</li><li>剪贴一整行：Ctrl+K</li><li>粘贴：Ctrl+U</li><li>搜索: Ctrl+W，然后输入你要搜索的关键字，回车确定，定位到第一个匹配的文本，接着可用Alt+W来定位到下一个匹配的文本。</li><li>翻页到上一页：Ctrl+Y</li><li>翻页到下一页：Ctrl+V</li><li>保存：Ctrl+O 保存所做的修改</li><li>退出：Ctrl+X。如果你修改了文件，下面会询问你是否需要保存修改。输入Y确认保存，输入N不保存，按Ctrl+C取消返回。如果输入了Y，下一步会让你输入想要保存的文件名。如果不需要修改文件名直接回车就行；若想要保存成别的名字（也就是另存为）则输入新名称然后确 定。这个时候也可用Ctrl+C来取消返回。</li></ul><h4 id="vi"><a href="#vi" class="headerlink" title="vi"></a><a href="http://man.linuxde.net/vi" target="_blank" rel="noopener">vi</a></h4><blockquote><p>vi命令是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。</p></blockquote><p>vi编辑器提供了丰富的内置命令，有些内置命令使用键盘组合键即可完成，有些内置命令则需要以冒号“：”开头输入。常用内置命令如下：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>Ctrl+u</td><td>向文件首翻半屏； </td></tr><tr><td>Ctrl+d</td><td>向文件尾翻半屏； </td></tr><tr><td>Ctrl+f</td><td>向文件尾翻一屏； </td></tr><tr><td>Ctrl+b</td><td>向文件首翻一屏； </td></tr><tr><td>Esc</td><td>从编辑模式切换到命令模式；</td></tr><tr><td>ZZ</td><td>命令模式下保存当前文件所做的修改后退出vi；</td></tr><tr><td>:行号</td><td>光标跳转到指定行的行首；</td></tr><tr><td>:wq</td><td>在命令模式下，执行存盘退出操作；</td></tr><tr><td>:w</td><td>在命令模式下，执行存盘操作；</td></tr><tr><td>:w!</td><td>在命令模式下，执行强制存盘操作；</td></tr><tr><td>:q</td><td>在命令模式下，执行退出vi操作；</td></tr><tr><td>:q!</td><td>在命令模式下，执行强制退出vi操作；</td></tr><tr><td>:set number</td><td>在命令模式下用于在最左端显示行号；</td></tr><tr><td>:set nonumber</td><td>在命令模式下用于在最左端不显示行号；</td></tr></tbody></table><h3 id="读取文件并输出到-Terminal-窗口"><a href="#读取文件并输出到-Terminal-窗口" class="headerlink" title="读取文件并输出到 Terminal 窗口"></a>读取文件并输出到 Terminal 窗口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat foo.txt                        <span class="comment">#显示文件全部内容</span></span><br><span class="line">cat &gt; filename                     <span class="comment">#创建文件并进入编辑模式</span></span><br><span class="line">cat foo.txt bar.txt &gt; foobar.txt   <span class="comment">#合并文件内容</span></span><br></pre></td></tr></table></figure><h3 id="查看命令的详细帮助"><a href="#查看命令的详细帮助" class="headerlink" title="查看命令的详细帮助"></a>查看命令的详细帮助</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 命令名</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>空格键</td><td>向文件尾部翻一屏</td></tr><tr><td>b</td><td>向文件首部翻一屏</td></tr><tr><td>/</td><td>后跟一个字符串和[Enter]来查找字符串</td></tr><tr><td>n</td><td>发现本次查找的下一个匹配</td></tr><tr><td>N</td><td>发现本次查找的上一个匹配</td></tr><tr><td>q</td><td>退出</td></tr></tbody></table><h3 id="定位某个命令的文件路径"><a href="#定位某个命令的文件路径" class="headerlink" title="定位某个命令的文件路径"></a>定位某个命令的文件路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> 命令</span><br></pre></td></tr></table></figure><p>这个命令会定位某个命令的文件路径。换言之，它会告诉你你执行某个具体命令的时候，在使用哪个文件。</p><h3 id="根据文件的内容输出文件类型"><a href="#根据文件的内容输出文件类型" class="headerlink" title="根据文件的内容输出文件类型"></a>根据文件的内容输出文件类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file 文件路径</span><br></pre></td></tr></table></figure><p>如果一个文件缺失了扩展名，那么这个命令可能会非常有用。</p><h3 id="利用-URL-语法在命令行下工作的文件传输工具"><a href="#利用-URL-语法在命令行下工作的文件传输工具" class="headerlink" title="利用 URL 语法在命令行下工作的文件传输工具"></a>利用 URL 语法在命令行下工作的文件传输工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl www.baidu.com              <span class="comment">#查看网站源码</span></span><br><span class="line">curl -o 文件名 www.sina.com      <span class="comment">#下载</span></span><br></pre></td></tr></table></figure><h3 id="运行脚本命令"><a href="#运行脚本命令" class="headerlink" title="运行脚本命令"></a>运行脚本命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh 脚本文件名</span><br></pre></td></tr></table></figure><p>例: 所有需要的操作存成一个脚本，以后只要运行一次这个脚本就可以了。</p><ol><li>终端中运行nano /clean；</li><li>把下列代码粘贴到 nano 中；<br>rm -rf /System/Library/Extensions.kextcache<br>rm -rf /System/Library/Extensions.mkext<br>chown -R root:wheel /System/Library/Extensions<br>chmod -R 755 /System/Library/Extensions<br>diskutil repairpermissions /<br>kextcache -k /System/Library/Extensions/  </li><li>Ctrl ＋O 存盘，Ctrl＋X 退出；  </li><li>以后只要在终端中运行一次 sh /clean即可；  </li></ol><h3 id="常用解压和压缩命令"><a href="#常用解压和压缩命令" class="headerlink" title="常用解压和压缩命令"></a>常用解压和压缩命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .tar（注：tar是打包，不是压缩）</span></span><br><span class="line">tar xvf FileName.tar             <span class="comment">#解压</span></span><br><span class="line">tar cvf FileName.tar DirName     <span class="comment">#打包</span></span><br><span class="line">tar tvf FileName.tar             <span class="comment">#查看包内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .zip</span></span><br><span class="line">unzip FileName.zip               <span class="comment">#解压</span></span><br><span class="line">zip FileName.zip DirName         <span class="comment">#打包</span></span><br></pre></td></tr></table></figure><h3 id="say"><a href="#say" class="headerlink" title="say"></a>say</h3><p>say 是一个文本转语音（TTS）的有趣工具，引擎和OS X使用的一样也是VoiceOver。可以用于在脚本中播放警告或提示。例如你可以设置Automator或Hazel脚本处理文件，并在任务完成时用  say 命令语音提示。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用 -f 选项朗读特定文本文件，-o 选项将朗读结果存为音频文件而不是播放</span></span><br><span class="line">say -f mynovel.txt -o myaudiobook.aiff</span><br></pre></td></tr></table></figure><h3 id="显示当前日历，或者指定日期的日历"><a href="#显示当前日历，或者指定日期的日历" class="headerlink" title="显示当前日历，或者指定日期的日历"></a>显示当前日历，或者指定日期的日历</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cal      <span class="comment">#输出当前月日历</span></span><br><span class="line">cal 2018 <span class="comment">#输出2018年日历</span></span><br></pre></td></tr></table></figure><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>通过安全的方式使用特殊的权限运行程序（通常为系统的超级用户）<br>默认情况下，任何管理员账户都可以使用sudo来获取 root 权限，甚至当 root 账户在图形界面被禁用的情况下，sudo依然有效。这个命令是很多情况下我们不得不使用 Terminal 的原因，——同样也是给每个用户管理员身份的危险所在。不过，你可以调整sudo的配置文件，来限制它的使用。</p><h2 id="彩蛋时刻"><a href="#彩蛋时刻" class="headerlink" title="彩蛋时刻"></a>彩蛋时刻</h2><ul><li><p>telnet towel.blinkenlights.nl ：星球大战电影  </p></li><li><p>输入emacs，按空格键，再按“esc＋x”键，左下角会出现“M-x”，输入游戏代码，如tetris（俄罗斯方块）、gomoku（五子棋）就能玩玩游戏，open /usr/share/emacs/*/lisp/play 可查看游戏列表。</p></li></ul><blockquote><p>ps: mac自带神的编辑器-Emacs,选择emacs就有来生的，因为一生刚够入门。</p></blockquote><p>参考网址：<br><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a><br><a href="http://www.cnblogs.com/peida/tag/linux%E5%91%BD%E4%BB%A4/" target="_blank" rel="noopener">每天一个linux命令</a></p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swagger文档规范</title>
      <link href="/2017/11/01/swaggerStandard/"/>
      <url>/2017/11/01/swaggerStandard/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://swagger.io/" target="_blank" rel="noopener">Swagger</a>是一个简单又强大的文档生成工具。在项目中集成这个工具，能够根据配置信息自动为我们生成一个api文档展示页，可以在浏览器中直接访问查看项目中的接口信息，同时也可以测试每个api接口，同时也是前后端开发人员联系的重要纽带。一份功能完整、结构清晰、描述合理的API文档能大大提高前后端的合作开发效率。</p><p><br></p><h2 id="合格的swagger文档"><a href="#合格的swagger文档" class="headerlink" title="合格的swagger文档"></a>合格的swagger文档</h2><p>在前后端分离的项目中常常会用到swagger，它既是测试工具，又是前后端沟通的桥梁，在项目中发挥着非常重要的作用。在项目初期，前后端一般都会有个磨合的过程，对swagger文档约定是不可少的。<br>那么，在前端眼中，怎么样算一份<strong>合格易懂</strong>的swagger文档。下面三张图为优秀范例：</p><p><img src="/image/swagger-sandard/swagger1.png" alt="优秀范例"><br><img src="/image/swagger-sandard/swagger2.png" alt="优秀范例"><br><img src="/image/swagger-sandard/swagger3.png" alt="优秀范例"></p><p><strong>以下是我们前端人员常关注的地方：</strong></p><ol><li>一般对应的是 注解中的 @ApiOperation，用在方法上，说明方法的作用。<ul><li>合格点：用中文简单描述。</li></ul></li><li>一般对应的是 注解中的 @ApiModelProperty，用于描述一个model的属性。<ul><li>合格点：<ul><li>有枚举类的属性加上枚举类说明，属性多的情况下尽量多加点中文注释。  </li><li>response格式写完整，不能{ “code”: 0, “data”: {} }  了事。</li></ul></li></ul></li><li>一般对应的是 注解中的 @ApiParam 或者 @ApiImplicitParam， 用于对每个参数的描述。<ul><li>合格点：<ul><li>params格式完整。</li><li>参数多的情况下尽量用中文注释。</li></ul></li></ul></li></ol><p><br><br>一般只要<strong>以下三点达成共识</strong>，那么对接的效率就会事半功倍，也不容易引起不愉快的争吵：</p><ul><li>后端写swagger文档时在以上关注点上下点功夫（一般是从代码中提取注释即可自动生成文档，所以对后端代码可读性也是有好处的）；</li><li>有接口字段改动时第一时间通知前端；</li><li>相同意义字段统一定义；</li></ul><p>  <br></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/u014231523/article/details/76522486" target="_blank" rel="noopener">swagger2常用注解说明</a><br><a href="https://www.jianshu.com/p/12f4394462d5" target="_blank" rel="noopener">swagger常用注解说明</a></p>]]></content>
      
      
      <categories>
          
          <category> 沟通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> communication </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>chrome调试指南</title>
      <link href="/2017/10/12/devTool/"/>
      <url>/2017/10/12/devTool/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>工欲善其事,必先利其器。</strong><br>轻量 便捷 实时</p><blockquote><p>Chrome 开发者工具是一套内置于Google Chrome中的Web开发和调试工具，可用来对网站进行迭代、调试和分析。</p></blockquote><a id="more"></a><h2 id="如何打开？"><a href="#如何打开？" class="headerlink" title="如何打开？"></a>如何打开？</h2><ul><li>在Chrome菜单中选择 更多工具 &gt; 开发者工具</li><li>在页面元素上右键点击，选择 “检查”</li><li>使用 快捷键 Ctrl+Shift+I (Windows) 或 Cmd+Opt+I (Mac)</li></ul><h1 id="设备模式"><a href="#设备模式" class="headerlink" title="设备模式"></a>设备模式</h1><p><strong>构建完全响应式，移动优先的网络体验</strong></p><blockquote><p>点击它可以切换到不同的终端(移动端和pc端)进行开发模式。<br>还可以选择不同的移动终端设备，同时可以选择不同的尺寸比例。<br>chrome浏览器的模拟移动设备和真实的设备相差不大，是非常好的选择。    </p></blockquote><h2 id="HOW-TO-USE？"><a href="#HOW-TO-USE？" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/device1_2.png" alt="image">  </p><p>除了上图标出的功能，右上角可以发现移动端调试的更多功能哦!<br><img src="/image/devTool/device2.png" width="300"></p><ul><li>Show device frame : 显示设备外壳</li><li>Show media queries : 显示媒体查询(对屏幕大小的判断生成响应式布局)</li><li>Show rulers : 显示标尺</li><li>Add device pixel ratio : 调整设备的像素比例</li><li>Add device type : 调整设备类型</li><li>Capture screenshot : 捕捉当前屏幕截图</li><li>Capture full size screenshot : 捕捉完整屏幕截图</li><li>Reset to defaults : 恢复默认</li></ul><h1 id="元素面板"><a href="#元素面板" class="headerlink" title="元素面板"></a>元素面板</h1><p><strong>使用元素面板可以自由的操作DOM和CSS来迭代布局和设计页面</strong></p><blockquote><p>该面板可以用来查看、修改页面上的元素，包括DOM标签以及css样式的查看、修改(ctrl + z 可撤销修改)，还可以展示相关盒模型的图形信息。    </p></blockquote><h2 id="HOW-TO-USE？-1"><a href="#HOW-TO-USE？-1" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/elments.png" alt="image">  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">🚩Tips：在 HTML DOM （文档对象模型）中，每个部分都是节点：  </span><br><span class="line">1、文档本身是文档节点  </span><br><span class="line">2、所有 HTML 元素是元素节点  </span><br><span class="line">3、所有 HTML 属性是属性节点  </span><br><span class="line">4、HTML 元素内的文本是文本节点（包括回车符也是属于文本节点）  </span><br><span class="line">5、注释是注释节点  </span><br><span class="line">Element 对象可以拥有类型为元素节点、文本节点、注释节点的子节点；  </span><br><span class="line">元素也可以拥有属性，属性是属性节点。  </span><br><span class="line">✔️总结：元素是元素节点，是节点中的一种，但元素节点中可以包含很多的节点。</span><br></pre></td></tr></table></figure><p><img src="/image/devTool/elements1.png" alt="image"></p><p>点击箭头按钮可选择元素,激活后，Elements窗口会根据在页面中鼠标的位置自动移动到相应的代码段并显示相关信息。  </p><h3 id="区域①：Html的DOM树结构，可以进行查看定位编辑；"><a href="#区域①：Html的DOM树结构，可以进行查看定位编辑；" class="headerlink" title="区域①：Html的DOM树结构，可以进行查看定位编辑；"></a>区域①：Html的DOM树结构，可以进行查看定位编辑；</h3><ul><li>页面自动标出鼠标悬浮所在代码片段元素</li><li>点击DOM树视图里面的节点，区域2显示相关信息</li><li>直接在某个节点上双击即可修改，且能实时在浏览器里面得到反馈。</li><li>拖拽节点可以直接调整顺序，也可以拖拽节点到编辑器</li><li>浏览器对例如Video、Password等组件进行了封装，无法查看到组件的详细代码，不利于调试。Settings → Preferences → Elements → 勾选Show user agent shadow DOM,这样能够在元素标签器中显示被隐藏的组件代码<h3 id="区域②：编辑修改并实时显示当前选中元素的CSS样式、属性等。"><a href="#区域②：编辑修改并实时显示当前选中元素的CSS样式、属性等。" class="headerlink" title="区域②：编辑修改并实时显示当前选中元素的CSS样式、属性等。"></a>区域②：编辑修改并实时显示当前选中元素的CSS样式、属性等。</h3></li><li>Styles标签页: 显示用户定义的样式，还有开发者工具添加的样式；<ul><li>顶部”Filter”输入框 : 快速查找样式</li><li>顶部”:hov”按钮 : 可强制改变元素状态,:active(当元素被鼠标按下还没有松开，处于激活状态时所显示的状态),:hover(鼠标悬停时显示的状态),:focus(元素获得光标焦点时的状态),:visited(元素被点击后显示的状态)</li><li>顶部”.cls”按钮 : 快速修改元素class</li><li>顶部”+”按钮 : 快速添加class</li><li>单击即可修改样式</li><li>在每个属性后面单击可以添加新的样式</li><li>灰色的element.style同样可以进行添加和书写，唯一区别是在这里添加的样式是添加到了该元素内部，即style属性</li><li>点击样式区域颜色前面的小方块可调出自定义调色板,支持在rgba、hsl和hexadecimal来回切换颜色模式和实时编辑预览页面颜色。</li><li>每行右下角的”┇”可以快速添加阴影、字体颜色、背景颜色</li></ul></li><li>Computed标签页: 显示开发者工具计算好的元素样式（盒式模型）；<ul><li>双击数字即可修改</li></ul></li><li>Event Listeners标签页: 显示当前DOM节点和其祖先节点的所有JavaScript事件监听器,即查看元素上绑定了哪些事件；<ul><li>勾选Ancestors可显示其祖先节点的事件监听器</li><li>勾选Framework listeners:解析框架绑定的事件监听器</li><li>每个事件会有对应的几个属性 handler,useCapture等<ul><li>handler是处理函数, 右键可以看到这个函数定义的位置</li><li>useCapture 是 addEventListener 的第三个参数，如果是true，表示在事件捕获阶段调用事件处理程序；如果是false，表示在事件冒泡阶段调用事件处理程序。</li></ul></li></ul></li><li>DOM Breakpoints标签页: 列出所有的DOM断点；<ul><li>在区域①右键可设置断点</li></ul></li><li>Properties标签页: 全面地列出当前选中元素的属性；</li></ul><h3 id="dom对象的辅助功能"><a href="#dom对象的辅助功能" class="headerlink" title="dom对象的辅助功能"></a>dom对象的辅助功能</h3><p><img src="/image/devTool/elements2.png" width="300"></p><ul><li>Add attribute : 添加元素属性</li><li>Edit attribute : 编辑元素属性</li><li>Edit as HTML : 直接对元素的HTML进行编辑，所有的修改都会即时在页面上得到呈现</li><li>Copy : 复制HTML代码<ul><li>Copy outerHTML : 复制元素内所有的html和文本内容</li><li>Copy selector : 复制元素结构</li><li>Copy xpath : 复制元素路径(爬虫神器)</li><li>Cut element : 剪切元素</li><li>Copy element : 复制元素</li><li>Paste element : 粘贴元素</li></ul></li><li>Hide element : 隐藏元素</li><li>Delete element : 删除元素</li><li>Expand all : 展开元素所有代码</li><li>Collapse all : 折叠元素所有代码</li><li>Scroll into view : 滚动浏览器窗口或容器元素，以便在当前视窗的可见范围看见当前元素。</li><li>Break on : 可以对某个元素进行监听，在JS对元素的属性或者HTML进行修改的时候，直接触发断点，跳转到对改元素进行修改的JS代码处<ul><li>subtree modifications : 当添加／改变／删除子元素时触发</li><li>attribute modifications : 当元素属性被改变时触发</li><li>node removal : 当移除元素时触发</li></ul></li></ul><h1 id="控制台面板"><a href="#控制台面板" class="headerlink" title="控制台面板"></a>控制台面板</h1><p><strong>在开发期间，可以使用控制台面板记录诊断信息，或者使用它作为shell在页面上与JavaScript交互</strong></p><blockquote><p>console 中有很多对我们调试代码有帮助的函数，我们可以在开发环境中配合 console 来调试代码，使得我们测试更加便利。<br>注： 当需要换到下一行而不是回车的时候，请按Shift+Enter。</p></blockquote><h2 id="HOW-TO-USE？-2"><a href="#HOW-TO-USE？-2" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/console.png" alt="image">  </p><table><thead><tr><th>代码实例</th><th>用途</th></tr></thead><tbody><tr><td>console.log(“这是平凡的字符串”);</td><td>打印字符串</td></tr><tr><td>console.info(“这是温柔的提示”);</td><td>打印提示消息</td></tr><tr><td>console.warn(“这是严肃的警告”);</td><td>打印警告消息</td></tr><tr><td>console.error(“这是错误消息”);</td><td>打印错误消息</td></tr><tr><td>console.debug(“这是调试信息”);</td><td>打印调试信息,console.log方法的别称</td></tr><tr><td>console.log(console);</td><td>打印对象</td></tr><tr><td>console.assert(1 == 0);</td><td>判断真假情况</td></tr><tr><td>console.group(‘报数’);  console.log(“一！”);  console.log(“二！”);  console.groupEnd();</td><td>分组输出</td></tr><tr><td>console.groupCollapsed();</td><td>创建一个新的分组.随后输出到控制台上的内容都会被添加一个缩进,表示该内容属于当前分组,直到调用console.groupEnd() 之后,当前分组结束。</td></tr><tr><td>var data = [{‘姓名’: ‘zlt’, ‘数量’: 1}];    console.table(data);</td><td>显示关联数组信息</td></tr><tr><td>console.dir(document.body);</td><td>将一个 JavaScript 对象的所有属性和属性值显示成一个可交互的列表,以树的结构进行输出</td></tr><tr><td>var test = document.getElementById(‘test’);   console.dirxml(test);</td><td>查看页面中对应元素的 html/xml 内容</td></tr><tr><td>console.log(‘%cMy name is zlt.’, ‘color: #fff; background: #000; font-size: 24px;’);</td><td>特殊的标示符%c，对输出的文字可以附加特殊的样式,background属性的url()中添加图片路径就可以实现图片的输出了 </td></tr><tr><td>$(‘table’)</td><td>返回与指定的CSS选择器相匹配的第一个元素，等同于document.querySelector();如果你使用的库，如jQuery使用$，那么这个功能将被覆盖，并且$将对应用该库的实现</td></tr><tr><td>$$(‘table’)</td><td>返回与指定的CSS选择器相匹配的所有元素的数组，等同于document.querySelectorAll()</td></tr><tr><td>$_</td><td>引用最近的一个表达式,功能与按向上的方向键再回车一样</td></tr><tr><td>$0 ~ $4</td><td>最近选择过的5个DOM节点。$0会返回最近一次点选的DOM结点。以此类推，$1返回的是上上次点选的DOM节点。最多可以保存5个，如果不满5个，则返回undefined。</td></tr><tr><td>$x(‘//*[@id=”console”]/div[2]/table[2]/tbody/tr[4]’)</td><td>返回与指定的XPath相匹配的所有元素的数组</td></tr><tr><td>var data = {name: ‘zlt’,num: 1};   keys(data);</td><td>返回传入对象所有属性名组成的数据</td></tr><tr><td>var data = {name: ‘zlt’,num: 1};   values(data);</td><td>返回所有属性值组成的数组</td></tr><tr><td>inspect(document.body)</td><td>Elements面板跳到需要查看的对象上  </td></tr><tr><td>getEventListeners(document.getElementById  (“eventListeners”)).click[0].listener</td><td>查看某个DOM对象上的事件  </td></tr><tr><td>monitorEvents(document.body, “click”)</td><td>监控相关的事件,unmonitorEvents便是用来停止这一监控</td></tr><tr><td>console.clear()</td><td>清理函数</td></tr><tr><td>clear()</td><td>用 chrome 的 command line api 来清理控制台</td></tr><tr><td>copy(document.body)</td><td>在控制台获取到的内容复制到剪贴板</td></tr><tr><td>document.designMode = “on”</td><td>直接修改网页内容</td></tr></tbody></table><p><strong>monitor(function) 接收一个函数名作为参数，比如function a,每次a被执行了，都会在控制台输出一条信息，里面包含了函数的名称a及执行时所传入的参数。 而unmonitor(function)便是用来停止这一监听。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'hello,'</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">monitor(sayHello);</span><br><span class="line">sayHello(<span class="string">'zlt'</span>);</span><br><span class="line">unmonitor(sayHello);</span><br><span class="line">sayHello(<span class="string">'zlttt'</span>);</span><br></pre></td></tr></table></figure></p><p><strong>调试一个方法，当该方法调用时会暂停并且在源码中定位，效果和断点类似。undebug可以停止调试。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'hello,'</span> + name); </span><br><span class="line">&#125;</span><br><span class="line">debug(sayHello);</span><br><span class="line">sayHello(<span class="string">'zlt'</span>);</span><br></pre></td></tr></table></figure></p><p><strong>记录次数</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.count(name);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"hi "</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(i &lt; <span class="number">4</span>) &#123;</span><br><span class="line">    hi(<span class="string">"person"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    hi(<span class="string">"zlt"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>记录代码运行所花费的时间,评估某段代码或是某个函数的性能</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">"神机妙算"</span>);</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> sum = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flog = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">          flog+=i;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"神机妙算"</span>);</span><br></pre></td></tr></table></figure></p><p><strong>评估某段代码或是某个函数的性能,结果显示在 Memory面板的profile中</strong><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.profile(<span class="string">"更高级的神机妙算"</span>);</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> sum = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flog = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">          flog+=i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.profileEnd(<span class="string">"更高级的神机妙算"</span>);</span><br></pre></td></tr></table></figure></p><p><strong>追踪函数的调用过程</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">0</span> &lt; num) &#123;</span><br><span class="line">    <span class="built_in">console</span>.trace(<span class="string">"现在num的值为"</span>, num);</span><br><span class="line">    <span class="keyword">return</span> num + add(num - <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a =<span class="number">3</span>;</span><br><span class="line">add(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><h1 id="源代码面板"><a href="#源代码面板" class="headerlink" title="源代码面板"></a>源代码面板</h1><blockquote><p>在源代码面板中设置断点来调试 JavaScript ，或者通过Workspaces（工作区）连接本地文件来使用开发者工具的实时编辑器。</p></blockquote><h2 id="HOW-TO-USE？-3"><a href="#HOW-TO-USE？-3" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/sources.png" alt="image">  </p><h3 id="区域①：Sources-Panel-的左侧分别是-Sources-和-Content-scripts和Snippets"><a href="#区域①：Sources-Panel-的左侧分别是-Sources-和-Content-scripts和Snippets" class="headerlink" title="区域①：Sources Panel 的左侧分别是 Sources 和 Content scripts和Snippets"></a>区域①：Sources Panel 的左侧分别是 Sources 和 Content scripts和Snippets</h3><ul><li>Sources : 显示加载的JS、CSS、HTML资源列表，点击后会在区域2显示对应的源代码<ul><li>Workspaces是Chrome DevTools的一个强大功能，这使DevTools变成了一个真正的IDE。只需打开Sources选项，然后右击左边面板的任何一个地方，选择Add Folder To Worskpace，或者只是把你的整个工程文件夹拖放入Developer Tool。</li><li>Workspaces会将Sources选项卡中的文件和本地项目中的文件进行匹配，所以你可以直接编辑和保存，而不必复制/粘贴外部改变的文件到编辑器。</li></ul></li><li>Content scripts : 这是 Chrome 的一种扩展程序， 它是按照扩展的ID来组织的，这些文件也是嵌入在页面中的资源，这类文件可以 读写和操作我们的资源，需要调试这些扩展文件，则可以在这个目录下打开相关 文件调试（但是我们的项目一般没有相关的扩展文件）</li><li>Snippets : 点击创建一个新的片段文件，写完后把右键文件Run，再结合控制台查看相关信息</li></ul><h3 id="区域②：显示源码"><a href="#区域②：显示源码" class="headerlink" title="区域②：显示源码"></a>区域②：显示源码</h3><ul><li>如果当前代码是经过压缩的话，可以点击左下方的花括号{}来增强可读性</li><li>点击JS代码块前面的数字可以设置断点，所有的断点都会列出右侧的断点区；</li><li>除了常规断点外, 还有个条件断点(右键 conditional breakpoint), 在设置的条件为 true 时才会断点, 在循环中需要断点时比较有用.</li><li>在当前的代码执行区域，在调试中如果发现需要修改的地方，可以立即修改，修改后保存即可生效</li></ul><h3 id="区域③：调试的功能区域"><a href="#区域③：调试的功能区域" class="headerlink" title="区域③：调试的功能区域"></a>区域③：调试的功能区域</h3><ul><li>最上面一排按钮分别是：<ul><li>暂停(F8快捷键):继续执行脚本的命令,如果后面还有断点,直接执行到后面的断点,没有断点直接执行到代码最后面</li><li>单步执行(F10快捷键):直接执行完函数进行下一步,不进入函数</li><li>单步跳入此执行块(F11快捷键):进入函数逐步执行函数</li><li>单步跳出此执行块(shift + F11快捷键):跳出函数</li><li>禁用所有断点:注释断点,仍旧显示但是不起作用</li><li>启用所有断点:图标激活之后,在代码出错之后会直接跳转到代码出错的那一行</li></ul></li><li>Watch：可以添加需要监听的变量，执行断点时可以观察变量的变化情况；<ul><li>选中变量后右键add selected text to watches可以添加监听</li><li>Watch窗口可直接添加需要监听的变量</li></ul></li><li>Call Stack：查看断点执行的堆栈情况，可以快速定位断点执行入口；<ul><li>若想重新从某个调用方法处执行，可以右键Restart Frame， 断点就会跳到此处开头重新执行，Scope 中的变量值也会依据代码重新更改</li></ul></li><li>Scope : 查看此时局部变量和全局变量的值</li><li>Breakpoints: 所有当前js的断点都会展示在这个区域，你可以点击按钮用来“去掉/加上”此处断点，也可以点击下方的代码表达式，跳到相应的程序代码处来查看</li><li>XHR Breakpoints: 点击右侧的+号，可以添加请求的URL，一旦 XHR 调用触发时就会在 request.send() 的地方中断</li><li>DOM Breakpoints: 监听和查看某个元素的变化的DOM断点列表</li><li>Event Listener Breakpoints：勾选你要监听的事件，在指定的事件执行时，断点就会有触发；</li></ul><h1 id="网络面板"><a href="#网络面板" class="headerlink" title="网络面板"></a>网络面板</h1><p><strong>使用网络面板了解请求和下载的资源文件并优化网页加载性能</strong></p><blockquote><p>可以看到所有的资源请求，包括网络请求，图片资源，html,css，js文件等请求，可以根据需求筛选请求项，一般多用于网络请求的查看和分析，分析后端接口是否正确传输，获取的数据是否准确，请求头，请求参数的查看。</p></blockquote><h2 id="HOW-TO-USE？-4"><a href="#HOW-TO-USE？-4" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/network.png" alt="image">  </p><h3 id="区域①：Controls工具栏"><a href="#区域①：Controls工具栏" class="headerlink" title="区域①：Controls工具栏"></a>区域①：Controls工具栏</h3><p>用来控制Network的功能及外观,从左往右功能依次为：</p><ul><li>(红色圆点)Record Network Log: 红色表示此时正在记录资源请求信息；</li><li>(灰色🚫)Clear: 清空所有的资源请求信息；</li><li>(摄像标志)捕获快照：选中某一个快照，在概览/请求列表出现的黄色竖线，就是该快照被捕捉的真实时间，双击快照可以放大。</li><li>(过滤标志)Filter: 过滤资源请求信息，选择后，会出现区域2所显示的过滤条件；</li><li>Perserve Log: 勾选后，再次记录请求的信息时不擦除之前的资源信息；</li><li>Disable cache: 勾选后，不允许缓存，所有资源均重新加载</li><li>offline: 勾选后，模拟断开网络</li><li>Online: 选择模拟网络状态</li></ul><h3 id="区域②：Filters筛选栏"><a href="#区域②：Filters筛选栏" class="headerlink" title="区域②：Filters筛选栏"></a>区域②：Filters筛选栏</h3><p>根据筛选条件筛选请求列表，按住command/ctrl键可多选;筛选框可以实现很多定制化的筛选，比如字符串匹配，关键词筛选等，其中关键词筛选主要有如下几种：</p><ul><li>domain：筛选出指定域名的请求，不仅支持自动补全，还支持*匹配。</li><li>has-response-header：筛选出包含指定响应头的请求。</li><li>is：通过is:running找出WebSocket请求。</li><li>larger-than：筛选出请求大于指定字节大小的请求，其中1000表示1k。</li><li>method：筛选出指定HTTP方法的请求，比如GET请求、POST请求等。</li><li>mime-type：筛选出指定文件类型的请求。</li><li>mixed-content：筛选出混合内容的请求（不懂啥意思）。</li><li>scheme：筛选出指定协议的请求，比如scheme:http、scheme:https。</li><li>set-cookie-domain：筛选出指定cookie域名属性的包含Set-Cookie的请求。</li><li>set-cookie-name：筛选出指定cookie名称属性的包含Set-Cookie的请求。</li><li>set-cookie-value：筛选出指定cookie值属性的包含Set-Cookie的请求。</li><li>status-code：筛选出指定HTTP状态码的请求。</li></ul><h3 id="区域③：Overviews-概览"><a href="#区域③：Overviews-概览" class="headerlink" title="区域③：Overviews 概览"></a>区域③：Overviews 概览</h3><p>资源被加载过来的时间线</p><ul><li>如果多条时间线垂直堆叠，表示多个资源被并行加载。</li></ul><h3 id="区域④：Request-Table-请求列表"><a href="#区域④：Request-Table-请求列表" class="headerlink" title="区域④：Request Table 请求列表"></a>区域④：Request Table 请求列表</h3><ul><li>该视窗列出了所有的资源请求，默认按时间顺序排序，点击某个资源，可以查看更详细的信息。</li><li>Name: 资源名称以及URL路径；</li><li>Status: HTTP状态码；</li><li>Type: 请求资源的MIME类型；</li><li>Initiator解释请求是怎么发起的，有四种可能的值：<ul><li>Parser：请求是由页面的HTML解析时发送的;</li><li>Redirect：请求是由页面重定向发送的;</li><li>Script：请求是由script脚本处理发送的;</li><li>Other：请求是由其他过程发送的，比如页面里的link链接点击。</li></ul></li><li>Size: Size是响应头部和响应体结合起来的大小；</li><li>Time: Time是从请求开始到接收到最后一个字节的总时长,可利用区域3进行过滤；</li><li>Waterfall: 显示网络请求的可视化瀑布流，鼠标悬停在某一个时间线上，可以显示整个请求各部分花费的时间</li><li>右键配置可请求列表</li><li>按时shift键，鼠标hover在请求上，可以查看请求的上游和下游，例如hover在common.js上，可以看到有一个绿色请求、一个红色请求。其中绿色请求表示common.js的上游请求，即谁触发了common.js请求，红色请求表示common.js的下游请求，即common.js又触发了什么请求。</li></ul><h3 id="区域⑤：Summary-总览"><a href="#区域⑤：Summary-总览" class="headerlink" title="区域⑤：Summary 总览"></a>区域⑤：Summary 总览</h3><p>汇总了请求数量，传输数据大小，加载时间等信息,从左往右依次显示为：</p><ul><li>X requests:请求总个数</li><li>X transferred:所有请求的大小</li><li>Finish:加载完毕时间</li><li>DOMContentLoaded:页面文档完全加载并解析完毕之后，会触发DOMContentLoaded事件，它在两个地方都有体现：概览视窗的蓝色竖线，总览视窗的触发时间。</li><li>Load:当所有资源加载完成后触发的，它在三个地方有体现：概览视窗的红色竖线，请求列表视窗的红色竖线，总览视窗的触发时间。</li></ul><p><img src="/image/devTool/network2.png" alt="image"><br>点击左侧某一个具体请求URL，可以看到该请求的详细HTTP请求情况：</p><ul><li>Headers：请求头信息和响应头信息</li><li>Preview：预览结果，如果是文件可以查看这个文件；如果是图片可以预览这个图片；如果是从服务器返回来的JSON数据，可以查看格式话后的JSON</li><li>Response：从服务器返回的响应结果</li><li>Cookies：请求和响应的Cookie<ul><li>Name：cookie的名称。</li><li>Value：cookie的值。</li><li>Domain：cookie所属域名。</li><li>Path：cookie所属URL。</li><li>Expire/Max-Age：cookie的存活时间。</li><li>Size：cookie的字节大小。</li><li>HTTP：表示cookie只能被浏览器设置，而且JS不能修改。</li><li>Secure：表示cookie只能在安全连接上传输。</li></ul></li><li>Timing：查看资源请求的生命周期，包含Queing/Stalled/Request/Response/Request sent/Waiting/Content Download各个阶段</li></ul><h1 id="性能面板"><a href="#性能面板" class="headerlink" title="性能面板"></a>性能面板</h1><p><strong>使用性能面板可以通过记录和查看网站生命周期内发生的各种事件来提高页面的运行时性能</strong></p><blockquote><p>在 Chrome 57 之后时间线(Timeline)面板更名为性能(Performance)面板。</p></blockquote><h2 id="HOW-TO-USE？-5"><a href="#HOW-TO-USE？-5" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/performance2.png" alt="image"><br>使用 Chrome DevTools 的 Performance 面板记录程序运行时的所有行为，并用于加以分析是解决程序性能问题的最好方案。 由以下四个子面板构成：</p><ul><li>控制面板（Controls）: 开启记录，停止记录，配置记录期间需要记录的内容。</li><li>概括（Overview）: 对页面表现（行为）的一个概述。<ul><li>概括区域由三个图形记录组成:<ul><li>FPS（Frames Per Second）:绿色的柱越高， FPS 值也越高。FPS 图表上方的红色小块指明了长帧(long frame)，这些可能是卡顿</li><li>CPU(CPU Resources):这个面积图(area chart)表明了哪种事件在消耗 CPU 资源。</li><li>NET:每种不同颜色的条代表一种资源。<ul><li>条越长表明获取该资源所花的时间越长。</li><li>每个条中的浅色部分代表等待时间（资源请求被发送到收到第一个响应字节的时间），深色部分代表文件传输时间（从收到第一个字节到这个资源完全被下载好）</li><li>蓝色 代表 HTML 文件，黄色 代表 Script 文件，紫色 代表 Stylesheets 文件， 绿色 代表 Media 文件，灰色 代表其他资源。</li></ul></li></ul></li></ul></li><li>火焰图（Flame Chart）: 可视化 CPU 堆栈(stack)信息记录。<ul><li>从不同的角度分析框选区域 。例如：Network，Frames, Interactions, Main等</li><li>在 Flame Chart 面板上你可能看到三根垂直的线，蓝线代表 DOMContentLoaded 事件，绿线代表渲染开始的时间( time to first paint)，红线代表 load 事件。</li></ul></li><li>详细信息（Detail）: 当有具体事件被选择时，该面板展示这个事件的更多详细信息。如果没有事件被选择，该面板展示当前所选时间段的一些信息。<ul><li>精确到毫秒级的分析，以及按调用层级，事件分类的整理<ul><li>Summary面板:从宏观层面概括了浏览器加载的总时间<ul><li>颜色：蓝色    ；英文： Loading；含义：加载</li><li>颜色：黄色    ；英文： Scripting；含义：    脚本</li><li>颜色：紫色    ；英文： Rendering；含义：    渲染</li><li>颜色：绿色    ；英文： Painting；含义：    绘制</li><li>颜色：深灰    ；英文： Other；含义：    其他</li><li>颜色：浅灰    ；英文： Idle；含义：    空闲</li></ul></li><li>Bottom-Up面板：The Heavy (Bottom Up) view is available in the Bottom-Up tab<ul><li>Self Time代表函数本身执行消耗时间，Total Time则是函数本身消耗再加上在调用它的函数中消耗的总时间，Activity是浏览器活动。</li><li>Group面板可以很清晰明了得分析按照活动、目录、域、子域、URL和Frame进行分组的前端性能。</li></ul></li><li>Call Tree面板：the Tree (Top Down) view is available in the Call Tree tab<ul><li>Bottom-Up类似事件冒泡，Call Tree类似事件捕获。自上而下的Call-Tree更符合我们的人类正常思维，可以更直观地分析浏览器对页面的build精确到毫秒级的情况</li></ul></li><li>Event Log面板 :展示所有阶段包括loading、javascripting、rendering、painting中各事件的耗时情况，并提供了filter输入框和按钮供你快速过滤。</li></ul></li></ul></li></ul><h1 id="内存面板"><a href="#内存面板" class="headerlink" title="内存面板"></a>内存面板</h1><p><strong>如果需要比性能面板提供的更多信息，可以使用内存面板，例如跟踪内存泄漏</strong></p><blockquote><p>在 Chrome 57 之后分析（Profiles）面板更名为内存（Memory）面板。</p></blockquote><h2 id="HOW-TO-USE？-6"><a href="#HOW-TO-USE？-6" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/memory.png" alt="image"><br>如果在页面中出现卡顿现象，可以使用 CPU 分析器，它准确地记录调用了哪些函数和每个函数花费的时间，</p><ul><li>Take Heap Snapshot:创建堆快照用来显示网页上的JS对象和相关的DOM节点的内存分布情况。<ul><li>利用该工具你可以创建JS的堆快照、内存分析图、对比堆快照以及定位内存泄漏问题。</li><li>选中Take Heap Snapshot,点击Take Snapshot按钮即可获取快照，在每一次获取快照前都会自动执行垃圾回收操作。</li><li>堆快照提供了不同的视角来进行查看：<ul><li>Summary : 该视图按照构造函数进行分组，用它可以捕获对象和它们使用的内存情况，对于跟踪定位DOM节点的内存泄漏特别有用。</li><li>Comparison : 对比两个快照的差别，用它可以对比某个操作前后的内存快照。分析操作前后的内存释放情况以及它的引用计数，便于你确认内存是否存在泄漏以及造成的原因。</li><li>Containment : 该视图可以探测堆的具体内容，它提供了一个更适合的视图来查看对象结构，有助于分析对象的引用情况，使用它可以分析闭包和进行更深层次的对象分析。</li><li>Statistics : 统计视图。</li></ul></li></ul></li><li>Record Allocation Profile:从JS函数角度记录内存的分配信息。<ul><li>点击Start按钮，执行你想要去深入分析的页面操作，当你完成你的操作后点击Stop按钮。然后会显示一个按JS函数进行内存分配的分解图.</li></ul></li><li>Record Allocation Timeline 从整个Heap角度记录内存的分配信息的时间轴信息，利用这个可以实现隔离内存泄漏问题。<ul><li>选中Record Allocation Timeline按钮，点击Start按钮之后，执行你认为可能会引起内存泄漏的操作，操作之后点击左上角的停止按钮即可。</li><li>你可以在蓝色竖线上通过缩放来过滤构造器窗格来仅仅显示在指定的时间帧内的被分配的对象。</li><li>录制过程中，在时间线上会出现一些蓝色竖条，这些蓝色竖条代表一个新的内存分配，这个新的内存分配都可以会有潜在的内存泄露问题。</li><li>通过展开对象并点击它的值则可以在Object窗格中查看更多新分配的对象细节。</li></ul></li></ul><h1 id="应用面板"><a href="#应用面板" class="headerlink" title="应用面板"></a>应用面板</h1><p><strong>使用应用面板可以检查加载的所有资源</strong></p><blockquote><p>在 Chrome 52 之后资源(Resources)面板更名为应用(Application)面板. 该面板可以检查和修改IndexedDB与Web SQL数据库，本地和会话存储，cookie，应用程序缓存，图像，字体和样式表。 点击一次按钮即可清除所有存储、数据库、缓存和服务工作线程。</p></blockquote><h2 id="HOW-TO-USE？-7"><a href="#HOW-TO-USE？-7" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/application.png" alt="image">  </p><ul><li>Local Storage : 如果你在开发过程中使用了local storage来存储键值对(KVPs)，那么你就可以通过Local Storage窗格来检查、新增、修改、删除这个键值对。</li><li>Application Cache : 你可以使用Application Cache窗格去查看通过Application Cache API创建的资源。</li><li>Frames : 将页面上的资源按frame类别进行组织显示。在资源上右击后在弹出菜单选择Reveal in Network Panel，就会跳转到Network面板并定位到该资源的位置。</li></ul><h1 id="安全面板"><a href="#安全面板" class="headerlink" title="安全面板"></a>安全面板</h1><p><strong>使用安全面板调试混合内容问题，证书问题等等。</strong></p><blockquote><p>使用 Security Overview 可以立即查看当前页面是否安全。 检查各个源以查看连接和证书详情（安全源）或找出具体哪些请求未受保护（非安全源）。</p></blockquote><h2 id="HOW-TO-USE？-8"><a href="#HOW-TO-USE？-8" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/security.png" alt="image">  </p><ul><li>如果网页是安全的，则会显示这样一条消息：This page is secure (valid HTTPS)。<ul><li>通过点击View certificate可以查看main origin的服务器证书信息。</li><li>点击左侧可以查看指定源的连接和证书详情。</li></ul></li><li>如果网页是不安全的，则会显示：This page is not secure。该面板可以区分两种类型的不安全的页面：<ul><li>如果被请求的页面通过HTTP提供服务，那么这个主源就会被标记为不安全。</li><li>如果被请求的页面是通过HTTPS获取的，但这个页面接着通过HTTP继续从其他来源检索内容， 那么这个页面仍然被标记为不安全。这就是所谓的混合内容页面,混合内容页面只是部分受到保护, 因为HTTP内容(非加密的内容)可以被嗅探者入侵,容易受到中间人攻击。</li></ul></li></ul><h1 id="检查面板"><a href="#检查面板" class="headerlink" title="检查面板"></a>检查面板</h1><p><strong>对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议</strong></p><blockquote><p>选中Performance, Best Practices, Accessibility, and Progressive Web App，点击Run按钮，将会对当前页面进行网络利用率和页面的性能优化作出诊断，并给出相应的优化建议。 这个对于优化前端页面、加速网页加载速度很有用（相当于Yslow）</p></blockquote><h2 id="HOW-TO-USE？-9"><a href="#HOW-TO-USE？-9" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/audits.png" alt="image"> </p><ul><li>Progressive Web App（在移动端利用提供的标准化框架，在网页应用中实现和原生应用相近的用户体验）: 检查网页是否符合PWA的标准。</li><li>Performance:检查网页加载时间</li><li>Best Practices : 检查页面是否遵循Google Web开发最佳实践</li><li>Accessibility : 检查网页能否给残障人士使用</li></ul><h1 id="开发者工具主菜单"><a href="#开发者工具主菜单" class="headerlink" title="开发者工具主菜单"></a>开发者工具主菜单</h1><p><strong>自定义并控制DevTools，也叫开发者工具主菜单</strong></p><blockquote><p>单击DevTools窗口右上角的“┇”按钮即可打开主菜单。</p></blockquote><h2 id="HOW-TO-USE？-10"><a href="#HOW-TO-USE？-10" class="headerlink" title="HOW TO USE？"></a>HOW TO USE？</h2><p><img src="/image/devTool/more.png" width="300"></p><ul><li>Dock side: 调整DevTools的位置</li><li>Show console drawer: 打开console的抽屉式选项卡</li><li>Search all files : 在所有文件中搜索</li><li>Open file : 打开指定文件</li><li>More tools: 在抽屉式选项卡中打开更多工具<ul><li>Animations:动画检查器</li><li>Coverage:使用动态分析（Dynamic Analysis）法来收集代码运行时的覆盖率</li><li>JavaScript Profiler:查看JavaScript函数的执行性能</li><li>Layers:看到页面中的复合层。（查找页面原因的时候非常有用）</li><li>Legacy Audits:旧版检查面板,面板的优化建议参照的是雅虎前端工程师的十四条黄金建议。<ul><li>Network Utillzation(网络利用率)、Web Page Performance(界面性能)</li><li>Audit Present State(针对目前网页状态分析)、Reload Page and Audit on load(重新加载网页进行分析)</li></ul></li><li>Network conditions:设置网络节流</li><li>Quick source:打开Source的抽屉式选项卡</li><li>Remote devices:连接远程设备</li><li>Rendering: 渲染设置</li><li>Request blocking:拦截请求</li><li>Search:在所有资源中搜索</li><li>Sensors:仿真面板,模拟移动设备的传感器</li></ul></li><li>Shortcuts:查看快捷键</li><li>Settings:打开设置面板</li></ul><p><img src="/image/devTool/more2.png" alt="image"> </p><ul><li>Preferences :首选项<ul><li>Appearance:外观设置<ul><li>Show third party URL badges:显示第三方URL标记？？？</li><li>Theme:改变devtool主题(简洁白／炫酷黑)</li><li>Panel layout:改变面板布局(横版／竖版／自动)</li><li>Enable Ctrl + 1-9 shortcut to switch panels:用快捷键Ctrl + 1-9来切换面板</li><li>Don’t show Chrome Data Saver warning:不显示chrome的节省数据流量警告</li><li>Disable paused state overlay: 禁用暂停悬浮框状态？？？</li></ul></li><li>Sources:源代码面板设置<ul><li>Automatically reveal files in navigator:在导航栏自动显示文件</li><li>Enable JavaScript source maps:在调试时如果有JS报错，浏览器就会通过解析map文件来重新merge压缩后的JS,使开发者可以用未压缩前的代码来调试。只有Chrome浏览器支持这个功能😲</li><li>Detect indentation:自动检测缩进</li><li>Autocompletion:自动补全</li><li>Bracket matching:括号自动匹配</li><li>Show whitespace characters:空白（空格、TAB、回车）显示设置</li><li>Display variable values inline while debugging:当前调试点及时预览 JavaScript 变量的内联值</li><li>Enable CSS source maps:在调试时如果有CSS报错，浏览器就会通过解析map文件来重新merge压缩后的CSS,使开发者可以用未压缩前的代码来调试。</li><li>Default indentation: 自定义默认缩进</li><li>Search in anonymous and content scripts:在匿名和内容脚本中搜索</li></ul></li><li>Elements:元素面板设置<ul><li>Color format:设置颜色格式</li><li>Show user agent shadow DOM:在元素标签器中显示被隐藏的组件代码</li><li>Word wrap:自动换行</li><li>Show HTML comments:显示HTML注释</li><li>Reveal DOM node on hover:在悬停状态下显示DOM节点</li><li>Show rulers: 鼠标悬停在某个元素上或者选中一个元素的时候会显示</li></ul></li><li>Network:网络面板设置<ul><li>Preserve log:保留请求日志</li><li>Color-code resource types: 不同色彩作标记资源类型</li><li>Group network log by frame:逐帧分组网络日志</li><li>Disable cache (while DevTools is open):禁用缓存</li><li>Enable request blocking:使请求阻塞</li></ul></li><li>Performance:性能面板设置<ul><li>Flamechart mouse wheel action:查看火焰图时鼠标滚轮的作用(缩放/滚动)</li><li>High resolution CPU profiling: 提高记录分析数据的准确性，能够以十分之一毫秒的度量来查看火焰图的数据</li><li>Record heap allocation stack traces:使用 Allocation 视图查看内存分配</li><li>Hide chrome frame in Layers view:Layers视图中隐藏谷歌浏览器内嵌框架(通过Internet Explorer的用户界面，以Chrome内核的渲染方式浏览网页)</li><li>Show native functions in JS Profile:使用 profiler 查看原生函数的执行性能</li></ul></li><li>Console:控制台面板设置<ul><li>Hide network messages:默认情况下，控制台将报告网络问题。启用此设置将指示控制台不显示这些错误的日志。例如，将不会记录 404 和 500 系列错误。</li><li>Selected context only:仅显示当前上下文的信息(top iframe worker extension)</li><li>User messages only: 仅显示console API方法的信息</li><li>Log XMLHttpRequests:确定控制台是否记录每一个 XMLHttpRequest。</li><li>Show timestamps:在调用时向显示的每条控制台消息追加一个时间戳。对于发生特定事件时的调试非常实用。这会停用消息堆叠。</li><li>Autocomplete from history:历史记录提示</li><li>Enable custom formatters:控制 JavaScript 对象的格式设置。</li><li>Preserve log upon navigation:在页面刷新或导航时保留控制台历史记录。</li></ul></li><li>Extensions:扩展<ul><li>Link handling:链接处理</li></ul></li><li>Debugger:断点设置<ul><li>Disable JavaScript:禁用JavaScript</li><li>Disable async stack traces:禁用异步堆栈跟踪</li></ul></li><li>DevTools<ul><li>Auto-open DevTools for popups:当新的标签/新窗口打开时,自动打开浏览器开发工具</li></ul></li></ul></li><li>Workspace :把本地服务器的资源映射为硬盘上的文件，实现调试 JS 和 CSS 的同时自动保存文件</li><li>Blackbox:屏蔽JS文件<ul><li>库代码（被屏蔽的文件）里抛出异常时不会暂停（当设置为Pause on exceptions时）</li><li>调试时Stepping into/out/over都会忽略库代码</li><li>事件断点也会忽略库代码</li><li>库代码里设置的任何断点也不会起作用</li><li>最终的结果就是只会调试应用代码而忽略第三方代码（配置了Blackbox的代码）。</li></ul></li><li>Emulated Devices:管理模拟设备</li><li>Throttling:设置网络延迟与带宽</li><li>Shortcuts:查看快捷键</li></ul><h3 id="最后还有！"><a href="#最后还有！" class="headerlink" title="最后还有！"></a>最后还有！</h3><p><strong>小技能</strong></p><ul><li>在浏览器地址栏输入：chrome://about/,你看到得这些地址几乎包含了所有谷歌浏览器的实用功能，下面来详解部分常用功能。</li><li>清除缓存、硬重载:如果你请求一个硬刷新，在开发者工具打开的情况下点击并按住 Chromes 的刷新按钮。你应该会看见一个下拉菜单，它允许你进行清除缓存和并进行硬重载。</li><li>任务管理器：在浏览器工具栏中点击 Chrome 菜单，选择更多工具，选择任务管理器。可以让你深入了解任何选项卡对应的 GPU，CPU 以及 JavaScript 内存使用状况，CSS 和脚本缓存使用状况。</li><li><a href="https://plus.google.com/+AddyOsmani/posts/ih85hKCyGve" target="_blank" rel="noopener">JSRunTime</a>：开发者工具检索 JavaScript 对象的拓展,它可以在内存中检索可用的 JavaScript 对象并生成相应的图，还可以根据值或者名称来进行匹配。</li><li><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="noopener">Vue.js devtools</a>：墙裂推荐，调试vue应用的神器</li></ul><blockquote><p>这些只是chrome Devtool的其中一部分功能，还有待补充。目前只能算入门篇。<br>so,欢迎来找我讨论补充～   </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/06/15/hello-world/"/>
      <url>/2017/06/15/hello-world/</url>
      
        <content type="html"><![CDATA[<div class="note info">博客使用了NEXT主题，特此贴上我的配置代码。<a href="https://hexo.io/docs/" target="_blank" rel="noopener">More info</a></div><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br><span class="line">hexo deploy -g  <span class="comment">#生成加部署</span></span><br><span class="line">hexo server -g  <span class="comment">#生成加预览</span></span><br><span class="line">hexo clean  <span class="comment">#把public静态文件清空再重新生成部署</span></span><br><span class="line">命令的简写</span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br><span class="line">hexo g -d == hexo generate hexo deploy</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="需要修改的文件"><a href="#需要修改的文件" class="headerlink" title="需要修改的文件"></a>需要修改的文件</h2><h3 id="themes-next-source-css-common-components-tags-label-styl"><a href="#themes-next-source-css-common-components-tags-label-styl" class="headerlink" title="themes/next/source/css/_common/components/tags/label.styl"></a>themes/next/source/css/_common/components/tags/label.styl</h3><p>注释掉 white-space: nowrap;</p><h3 id="themes-next-source-images"><a href="#themes-next-source-images" class="headerlink" title="themes/next/source/images"></a>themes/next/source/images</h3><p>该目录下创建global目录，放入</p><ul><li><a href="https://zhaoluting.github.io/images/global/background.jpg">background.jpg</a></li><li><a href="https://zhaoluting.github.io/images/global/favicon-16x16-next.png">favicon-16x16-next.png</a></li><li><a href="https://zhaoluting.github.io/images/global/favicon-32x32-next.png">favicon-32x32-next.png</a></li></ul><h3 id="themes-next-config-yml"><a href="#themes-next-config-yml" class="headerlink" title="themes/next/_config.yml"></a>themes/next/_config.yml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置图标 --&gt;</span></span><br><span class="line">favicon:</span><br><span class="line">  small: /images/global/favicon-16x16-next.png</span><br><span class="line">  medium: /images/global/favicon-32x32-next.png</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置页脚 --&gt;</span></span><br><span class="line">footer:</span><br><span class="line">  since: 2017</span><br><span class="line">  <span class="comment">&lt;!-- 设置页脚动效 --&gt;</span></span><br><span class="line">  icon:</span><br><span class="line">    name: heart</span><br><span class="line">    animated: true</span><br><span class="line">    color: "#a88771"</span><br><span class="line">  <span class="comment">&lt;!-- 隐藏自带版本信息 --&gt;</span></span><br><span class="line">  powered:</span><br><span class="line">    enable: false</span><br><span class="line">    version: false</span><br><span class="line">  theme:</span><br><span class="line">    enable: false</span><br><span class="line">    version: false</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置顶部菜单栏 --&gt;</span></span><br><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  schedule: /schedule/ || calendar</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 右侧展开显示的联系方式 --&gt;</span></span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/zhaoluting || github</span><br><span class="line">  E-Mail: mailto:839327424@qq.com || envelope</span><br><span class="line">  More: https://zhaoluting.github.io/about/ || vcard</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 右侧展开显示的更多信息 --&gt;</span></span><br><span class="line">links_icon: code</span><br><span class="line">links_title: 技术栈</span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  vue: https://cn.vuejs.org/</span><br><span class="line">  react: https://react.docschina.org/</span><br><span class="line">  mpvue: http://mpvue.com/</span><br><span class="line">  node: https://nodejs.org/en/</span><br><span class="line">  webpack: https://webpack.js.org/</span><br><span class="line">  koa: https://koa.bootcss.com/</span><br><span class="line">  pupprteer: https://pptr.dev/</span><br><span class="line">  MySQL: https://www.mysql.com/</span><br><span class="line">  zsh: https://zhaoluting.github.io/2018/01/25/Mac-terminal/</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置右侧展开头像 --&gt;</span></span><br><span class="line">avatar:</span><br><span class="line">  url: /images/global/favicon-32x32-next.png</span><br><span class="line">  rounded: true</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 页面右下角滚动显示百分比 --&gt;</span></span><br><span class="line">sidebar:</span><br><span class="line">  scrollpercent: true</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 代码块具备复制功能 --&gt;</span></span><br><span class="line">codeblock:</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    show_result: true</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 安卓浏览器样式优化 --&gt;</span></span><br><span class="line">android_chrome_color: "#a88773"</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 打开本地搜索功能 --&gt;</span></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 主题自带样式 note 标签配置，详见https://github.com/iissnan/hexo-theme-next/pull/1697 --&gt;</span></span><br><span class="line">note:</span><br><span class="line">  style: simple</span><br><span class="line">  icons: true</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 选项卡样式配置，详见https://almostover.ru/2016-01/hexo-theme-next-test/#Tab-tag-test --&gt;</span></span><br><span class="line">tabs:</span><br><span class="line">  transition:</span><br><span class="line">    tabs: true</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启图片预览功能 --&gt;</span></span><br><span class="line">fancybox: true</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 显示顶部阅读进度条 --&gt;</span></span><br><span class="line">pace: true</span><br><span class="line">pace_theme: pace-theme-flash</span><br><span class="line">pace: true</span><br></pre></td></tr></table></figure><h3 id="themes-next-source-css-custom-custom-styl"><a href="#themes-next-source-css-custom-custom-styl" class="headerlink" title="themes/next/source/css/_custom/custom.styl"></a>themes/next/source/css/_custom/custom.styl</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line">//首页文章阴影样式</span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">14px</span> <span class="built_in">rgba</span>(202, 203, 203, .5);</span><br><span class="line">    <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">14px</span> <span class="built_in">rgba</span>(202, 203, 204, .5);</span><br><span class="line">&#125;</span><br><span class="line">//热评文章</span><br><span class="line"><span class="selector-class">.ds-top-threads</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: border-width <span class="number">0.2s</span> linear <span class="number">0s</span>, color <span class="number">0.2s</span> linear <span class="number">0s</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ds-top-threads</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">8px</span> solid <span class="number">#4d768c</span>;</span><br><span class="line">&#125;</span><br><span class="line">//首页头部样式</span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"../../images/global/background.jpg"</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#A48777</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.headband</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#926f5a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.brand</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#d08e65cc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: none;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ffffff59</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.logo-line-before</span>,</span><br><span class="line"><span class="selector-class">.logo-line-after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-class">.menu-item</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(15, 46, 65);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.site-meta</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">float</span>: none;</span><br><span class="line">    .site-title &#123;</span><br><span class="line">        <span class="selector-tag">font-size</span>: 35<span class="selector-tag">px</span>;</span><br><span class="line">        font-family: 'Comic Sans MS', sans-serif;</span><br><span class="line">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">        <span class="selector-tag">height</span>: 50<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">padding-top</span>: 5<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//首页尾部样式</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer-inner</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Comic Sans MS'</span>, sans-serif;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#a88772</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#a88773</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">2px</span> <span class="number">6px</span> <span class="number">#724d38</span>;</span><br><span class="line">    .sidebar-inner &#123;</span><br><span class="line">        <span class="selector-tag">color</span>: <span class="selector-id">#e6c5b2</span>;</span><br><span class="line">        // 侧栏头像</span><br><span class="line">        <span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">transition</span>: transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        //侧边栏信息样式修改</span><br><span class="line">        <span class="selector-class">.site-author-name</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">font-family</span>: <span class="string">'Comic Sans MS'</span>, sans-serif;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.site-description</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#e6c5b2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">border-bottom-color</span>: <span class="number">#e6c5b2</span>;</span><br><span class="line">            <span class="attribute">border-bottom</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.sidebar-nav</span> &#123;</span><br><span class="line">            .sidebar-nav-active &#123;</span><br><span class="line">                <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">                <span class="selector-tag">border-bottom-color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">li</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#e1c6b5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.sidebar-nav-active</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.site-state</span> &#123;</span><br><span class="line">            .site-state-item &#123;</span><br><span class="line">                <span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;</span><br><span class="line">                <span class="selector-tag">padding</span>: 8<span class="selector-tag">px</span> 28<span class="selector-tag">px</span>;</span><br><span class="line">                <span class="selector-tag">border-left</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e6c5b2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.links-of-blogroll</span> &#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">            <span class="attribute">margin-bottom</span>: <span class="number">42px</span>;</span><br><span class="line">            .links-of-blogroll-title &#123;</span><br><span class="line">                font-family: 'Comic Sans MS', sans-serif;</span><br><span class="line">                <span class="selector-tag">font-size</span>: 16<span class="selector-tag">px</span>;</span><br><span class="line">                <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.links-of-blogroll-list</span> &#123;</span><br><span class="line">                <span class="attribute">border-top</span>: <span class="number">1px</span> dotted;</span><br><span class="line">                <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">                <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">                <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.links-of-author</span> &#123;</span><br><span class="line">            <span class="attribute">margin-bottom</span>: <span class="number">70px</span>;</span><br><span class="line">            .links-of-author-item i &#123;</span><br><span class="line">                <span class="selector-tag">margin-right</span>: 3<span class="selector-tag">px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //文章目录样式</span><br><span class="line">        <span class="selector-class">.post-toc</span> &#123;</span><br><span class="line">            .nav .active&gt;a &#123;</span><br><span class="line">                <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">ol</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#e0c6b5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">ol</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//侧栏按钮样式</span><br><span class="line"><span class="selector-class">.sidebar-toggle</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#a88772</span>;</span><br><span class="line">    .sidebar-toggle-line &#123;</span><br><span class="line">        <span class="selector-tag">background</span>: <span class="selector-id">#ffffff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.site-nav-toggle</span> &#123;</span><br><span class="line">    .btn-bar &#123;</span><br><span class="line">        <span class="selector-tag">background</span>: <span class="selector-id">#a88772</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.back-to-top</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#a88772</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//首页文章块样式</span><br><span class="line"><span class="selector-class">.post-type-normal</span> &#123;</span><br><span class="line">    //首页阅读全文样式</span><br><span class="line">    <span class="selector-class">.post-button</span> &#123;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        .btn &#123;</span><br><span class="line">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">            <span class="selector-tag">font-size</span>: 15<span class="selector-tag">px</span>;</span><br><span class="line">            <span class="selector-tag">background</span>: <span class="selector-id">#ae866f</span>;</span><br><span class="line">            <span class="selector-tag">border-radius</span>: 16<span class="selector-tag">px</span>;</span><br><span class="line">            <span class="selector-tag">line-height</span>: 2;</span><br><span class="line">            <span class="selector-tag">margin</span>: 0 4<span class="selector-tag">px</span> 8<span class="selector-tag">px</span> 4<span class="selector-tag">px</span>;</span><br><span class="line">            <span class="selector-tag">padding</span>: 0 20<span class="selector-tag">px</span>;</span><br><span class="line">            <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#926f5a</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span>&#123;</span><br><span class="line">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#926f5a</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff1ea</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.post-footer</span> &#123;</span><br><span class="line">        .post-eof &#123;</span><br><span class="line">            <span class="selector-tag">margin</span>: 20<span class="selector-tag">px</span> <span class="selector-tag">auto</span> 10<span class="selector-tag">px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 代码块复制按钮样式</span><br><span class="line"><span class="selector-class">.highlight-wrap</span> <span class="selector-class">.copy-btn</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#8D908C</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.posts-expand</span> &#123;</span><br><span class="line">    .post-body &#123;</span><br><span class="line">        <span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">transform</span>: initial;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span> &#123;</span><br><span class="line">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> dashed <span class="number">#999</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
